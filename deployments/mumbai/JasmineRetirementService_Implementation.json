{
  "address": "0x4c9b0797AD827e80498E2066A1C0093A42B1AcA3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eat",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Disabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Prohibited",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "RequiresRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "metadataVersion",
          "type": "uint8"
        }
      ],
      "name": "UnsupportedMetadataVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValidationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC1820_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IERC1820Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eat",
      "outputs": [
        {
          "internalType": "contract IJasmineEAT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "contract IJasmineMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        }
      ],
      "name": "registerRetirementRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3154cfb083df816c303b50ad7af5239d35e46ad2d2d006515ca53f53048b7a7c",
  "receipt": {
    "to": null,
    "from": "0x6F518B13C26368F17287f4FfB5faE6EA6544Fff1",
    "contractAddress": "0x4c9b0797AD827e80498E2066A1C0093A42B1AcA3",
    "transactionIndex": 2,
    "gasUsed": "1911071",
    "logsBloom": "0x
    "blockHash": "0x1b814bec35faf3e85827d822a8930bc727d73e4b36a4dffd317d38f641d9387b",
    "transactionHash": "0x3154cfb083df816c303b50ad7af5239d35e46ad2d2d006515ca53f53048b7a7c",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 38385927,
        "transactionHash": "0x3154cfb083df816c303b50ad7af5239d35e46ad2d2d006515ca53f53048b7a7c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006f518b13c26368f17287f4ffb5fae6ea6544fff1",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000adcf96b215e1000000000000000000000000000000000000000000000000007acb87957f41ebb000000000000000000000000000000000000000000000d0ef06494983feebfa200000000000000000000000000000000000000000000000007a1db7fecd2c0ab000000000000000000000000000000000000000000000d0ef06f7191ab101db2",
        "logIndex": 2003,
        "blockHash": "0x1b814bec35faf3e85827d822a8930bc727d73e4b36a4dffd317d38f641d9387b"
      }
    ],
    "blockNumber": 38385927,
    "cumulativeGasUsed": "8127929",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe9c135b9Fb2942982e3DF5B89a03E51D8EE6CB74",
    "0xAE205e00C7DCb5292388BD8962E79582a5AE14d0"
  ],
  "numDeployments": 8,
  "solcInputHash": "ee94fc51ee8d6aa8d91c3192ded4ee4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eat\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Disabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Prohibited\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RequiresRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"metadataVersion\",\"type\":\"uint8\"}],\"name\":\"UnsupportedMetadataVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValidationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC1820_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IERC1820Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eat\",\"outputs\":[{\"internalType\":\"contract IJasmineEAT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract IJasmineMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"registerRetirementRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kai Aldag<kai.aldag@jasmine.energy>\",\"custom:security-contact\":\"dev@jasmine.energy\",\"errors\":{\"Disabled()\":[{\"details\":\"Emitted if function is disabled\"}],\"InvalidInput()\":[{\"details\":\"Emitted if input is invalid\"}],\"Prohibited()\":[{\"details\":\"Emitted for unauthorized actions\"}],\"RequiresRole(bytes32)\":[{\"details\":\"Emitted if access control check fails\"}],\"UnsupportedMetadataVersion(uint8)\":[{\"details\":\"Emitted if contract does not support metadata version\"}],\"ValidationFailed()\":[{\"details\":\"Emitted if internal validation failed\"}]},\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"inheritdoc ERC1155Receiver\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"inheritdoc ERC1155Receiver\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"registerRetirementRecipient(address,address)\":{\"details\":\"Requirements:      - Retirement service must be an approved ERC-1820 manager of account      - Implementer must support IRetirementRecipient interface via ERC-165 \",\"params\":{\"account\":\"Address to register retirement recipient for\",\"implementer\":\"Smart contract address to register as retirement implementer\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"Jasmine Retirement Service\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"registerRetirementRecipient(address,address)\":{\"notice\":\"Registers a smart contract to receive notifications on retirement events \"}},\"notice\":\"Facilitates retirements of EATs and JLTs in the Jasmine protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JasmineRetirementService.sol\":\"JasmineRetirementService\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":400},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC1820Registry.sol\\\";\\n\",\"keccak256\":\"0x4cb9e864595dc8034d1649eb72d6ad31bcff1c9c8d3d94236cbbbc89493877db\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using or updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x42f11bff9d625194645e74f01a3cf8f69a3979f07becfa293f75757cabb92050\",\"license\":\"MIT\"},\"contracts/JasmineRetirementService.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\n//  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  Imports  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n// Core Implementations\\nimport { IRetirementService } from \\\"./interfaces/IRetirementService.sol\\\";\\nimport { JasmineErrors } from \\\"./interfaces/errors/JasmineErrors.sol\\\";\\nimport { ERC1155ReceiverUpgradeable as ERC1155Receiver } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\\\";\\nimport { IERC1155ReceiverUpgradeable as IERC1155Receiver } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport { Ownable2StepUpgradeable as Ownable2Step } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n// External Contracts\\nimport { IJasmineEAT } from \\\"./interfaces/core/IJasmineEAT.sol\\\";\\nimport { IJasmineMinter } from \\\"./interfaces/core/IJasmineMinter.sol\\\";\\nimport { IERC1820Registry } from \\\"@openzeppelin/contracts/interfaces/IERC1820Registry.sol\\\";\\nimport { IRetirementRecipient } from \\\"./interfaces/IRetirementRecipient.sol\\\";\\n\\n// Libraries\\nimport { Calldata } from \\\"./libraries/Calldata.sol\\\";\\nimport { ArrayUtils } from \\\"./libraries/ArrayUtils.sol\\\";\\n\\n\\n/**\\n * @title Jasmine Retirement Service\\n * @author Kai Aldag<kai.aldag@jasmine.energy>\\n * @notice Facilitates retirements of EATs and JLTs in the Jasmine protocol\\n * @custom:security-contact dev@jasmine.energy\\n */\\ncontract JasmineRetirementService is \\n    IRetirementService,\\n    JasmineErrors,\\n    ERC1155Receiver,\\n    Ownable2Step,\\n    UUPSUpgradeable\\n{\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Fields\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    IJasmineMinter public immutable minter;\\n    IJasmineEAT public immutable eat;\\n\\n    IERC1820Registry public constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    // Setup\\n    // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    constructor(address _minter, address _eat) {\\n        minter = IJasmineMinter(_minter);\\n        eat = IJasmineEAT(_eat);\\n    }\\n\\n    function initialize(address _owner) external initializer onlyProxy {\\n        _transferOwnership(_owner);\\n\\n        __UUPSUpgradeable_init();\\n        __Ownable2Step_init();\\n        __ERC1155Receiver_init();\\n\\n        eat.setApprovalForAll(address(minter), true);\\n    }\\n\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  ERC-1155 Receiver Functions\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /// @dev inheritdoc ERC1155Receiver\\n    function onERC1155Received(\\n        address,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        external override\\n        onlyEAT\\n        returns (bytes4)\\n    {\\n        // 1. If transfer has data, forward to minter to burn. Else, create retire data\\n        if (data.length != 0) {\\n            // 2. Execute retirement if data encodes retirement op, else burn with given data\\n            (bool isRetirement, bool hasFractional) = Calldata.isRetirementOperation(data);\\n            if (isRetirement) {\\n                _executeRetirement(from, tokenId, amount, hasFractional, data);\\n            } else {\\n                minter.burn(tokenId, amount, data);\\n            }\\n        } else {\\n            // 3. If no data, defaut to retire operation\\n            _executeRetirement(from, tokenId, amount, false, Calldata.encodeRetirementData(from, false));\\n        }\\n        \\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /// @dev inheritdoc ERC1155Receiver\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) \\n        external override\\n        onlyEAT\\n        returns (bytes4)\\n    {\\n        // 1. If transfer has data, forward to minter to burn. Else, create retire data\\n        if (data.length != 0) {\\n            // 2. Execute retirement if data encodes retirement op, else burn with given data\\n            (bool isRetirement, bool hasFractional) = Calldata.isRetirementOperation(data);\\n            if (isRetirement) {\\n                _executeRetirement(from, tokenIds, amounts, hasFractional, data);\\n            } else {\\n                minter.burnBatch(tokenIds, amounts, data);\\n            }\\n        } else {\\n            // 3. If no data, defaut to retire operation\\n            _executeRetirement(from, tokenIds, amounts, false, Calldata.encodeRetirementData(from, false));\\n        }\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Retirement Notification Recipient\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @notice Registers a smart contract to receive notifications on retirement events\\n     * \\n     * @dev Requirements:\\n     *      - Retirement service must be an approved ERC-1820 manager of account\\n     *      - Implementer must support IRetirementRecipient interface via ERC-165\\n     * \\n     * @param account Address to register retirement recipient for\\n     * @param implementer Smart contract address to register as retirement implementer\\n     */\\n    function registerRetirementRecipient(\\n        address account,\\n        address implementer\\n    ) external {\\n        ERC1820_REGISTRY.setInterfaceImplementer(\\n            account == address(0x0) ? msg.sender : account,\\n            type(IRetirementRecipient).interfaceId,\\n            implementer\\n        );\\n    }\\n\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Upgrades\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /// @dev `Ownable` owner is authorized to upgrade contract, not the ERC1967 admin\\n    function _authorizeUpgrade(address) internal override onlyOwner {} // solhint-disable-line no-empty-blocks\\n\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Internal\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    /**\\n     * @dev Utility function to execute a retirement of EATs\\n     * \\n     * @param beneficiary Address receiving retirement credit\\n     * @param tokenId EAT token ID being retired\\n     * @param amount Number of EATs being retired\\n     * @param hasFractional Whether to retire a fractional EAT\\n     * @param data Optional data to be emitted by retirement\\n     */\\n    function _executeRetirement(\\n        address beneficiary,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bool hasFractional,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (amount == 0) revert JasmineErrors.InvalidInput();\\n\\n        // 1. Decode beneficiary from data if able, set otherwise\\n        if (data.length >= 2) {\\n            (,beneficiary) = abi.decode(data, (bytes1,address));\\n        } else if (data.length == 1) {\\n            data = abi.encodePacked(data, beneficiary);\\n        } else if (data.length == 0) {\\n            data = Calldata.encodeRetirementData(beneficiary, hasFractional);\\n        }\\n\\n        // 2. If fractional, execute burn and decrement amount\\n        if (hasFractional) {\\n            _executeFractionalRetirement(tokenId);\\n\\n            if (amount == 1) return;\\n\\n            unchecked {\\n                amount--;\\n            }\\n            data[0] = Calldata.RETIREMENT_OP;\\n        }\\n        \\n        minter.burn(tokenId, amount, data);\\n        _notifyRetirementRecipient(beneficiary, tokenId, amount);\\n    }\\n\\n    /**\\n     * @dev Utility function to execute a batch retirement of EATs\\n     * \\n     * @param beneficiary Address receiving retirement credit\\n     * @param tokenIds EAT token IDs being retired\\n     * @param amounts Number of EATs being retired\\n     * @param hasFractional Whether to retire a fractional EAT\\n     * @param data Optional data to be emitted by retirement\\n     */\\n    function _executeRetirement(\\n        address beneficiary,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bool hasFractional,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (tokenIds.length != amounts.length || tokenIds.length == 0) revert JasmineErrors.InvalidInput();\\n\\n        // 1. Decode beneficiary from data if able, set otherwise\\n        if (data.length >= 2) {\\n            (,beneficiary) = abi.decode(data, (bytes1,address));\\n        } else if (data.length == 1) {\\n            data = abi.encodePacked(data, beneficiary);\\n        } else if (data.length == 0) {\\n            data = Calldata.encodeRetirementData(beneficiary, hasFractional);\\n        }\\n\\n        // 2. If fractional, burn single and update tokens and data\\n        if (hasFractional) {\\n            _executeFractionalRetirement(tokenIds[0]);\\n\\n            data[0] = Calldata.RETIREMENT_OP;\\n\\n            // 2.1 If only one of first token, pop from tokenIds. Else decrement amount\\n            if (amounts[0] == 1) {\\n                tokenIds  = abi.decode(ArrayUtils.slice(abi.encode(tokenIds), 1, tokenIds.length-1), (uint256[]));\\n                amounts = abi.decode(ArrayUtils.slice(abi.encode(amounts), 1, amounts.length-1), (uint256[]));\\n\\n                if (tokenIds.length == 0) return;\\n            } else {\\n                unchecked {\\n                    amounts[0]--;\\n                }\\n            }\\n        }\\n\\n        // 3. Burn and notify recipient\\n        minter.burnBatch(\\n            tokenIds,\\n            amounts,\\n            data\\n        );\\n        _notifyRetirementRecipient(beneficiary, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev Retires a single EAT for fractional purposes\\n     * \\n     * @param tokenId EAT token ID to retire fraction of\\n     */\\n    function _executeFractionalRetirement(uint256 tokenId) private {\\n        minter.burn(tokenId, 1, Calldata.encodeFractionalRetirementData());\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  Retirement Hooks  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n    /**\\n     * @dev Checks if retiree has a Retirement Recipient set and notifies implementer\\n     *      of retirement event if possible. Will not revert if implementer's \\n     *      onRetirement call fails.\\n     * \\n     * @param retiree Account executing retirement\\n     * @param tokenIds EAT token IDs being retired\\n     * @param amounts Amount of EATs being retired\\n     */\\n    function _notifyRetirementRecipient(\\n        address retiree,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) private {\\n        address implementer = ERC1820_REGISTRY.getInterfaceImplementer(retiree, type(IRetirementRecipient).interfaceId);\\n        if (implementer != address(0x0)) {\\n            /* solhint-disable no-empty-blocks */\\n            try IRetirementRecipient(implementer).onRetirement(retiree, tokenIds, amounts) { }\\n            catch { }\\n            /* solhint-enable no-empty-blocks */\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if retiree has a Retirement Recipient set and notifies implementer\\n     *      of retirement event if possible. Will not revert if implementer's \\n     *      onRetirement call fails.\\n     * \\n     * @param retiree Account executing retirement\\n     * @param tokenId EAT token ID being retired\\n     * @param amount Amount of EATs being retired\\n     */\\n    function _notifyRetirementRecipient(\\n        address retiree,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) private {\\n        address implementer = ERC1820_REGISTRY.getInterfaceImplementer(retiree, type(IRetirementRecipient).interfaceId);\\n        if (implementer != address(0x0)) {\\n            (uint256[] memory tokenIds, uint256[] memory amounts) = (new uint256[](1), new uint256[](1));\\n            tokenIds[0] = tokenId;\\n            amounts[0] = amount;\\n            /* solhint-disable no-empty-blocks */\\n            try IRetirementRecipient(implementer).onRetirement(retiree, tokenIds, amounts) { }\\n            catch { }\\n            /* solhint-enable no-empty-blocks */\\n        }\\n    }\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  Modifiers  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n    /// @dev Enforces caller is EAT contract\\n    modifier onlyEAT() {\\n        if (msg.sender != address(eat)) revert JasmineErrors.Prohibited();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x27627374ecc517bbd230abb3d32f16eedce3cd91110c5c682e3f3875fe08fe0c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRetirementRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Retirement Recipient Interface\\n * @author Kai Aldag<kai.aldag@jasmine.energy>\\n * @notice \\n * @custom:security-contact dev@jasmine.energy\\n */\\ninterface IRetirementRecipient {\\n    \\n    /**\\n     * @dev Retirement hook invoked by retirement service if set for address\\n     * @param retiree Address which is retiring EATs\\n     * @param tokenIds IDs of EATs being retired\\n     * @param quantities Quantity of EATs being retired\\n     */\\n    function onRetirement(address retiree, uint256[] memory tokenIds, uint256[] memory quantities) external;\\n    \\n}\\n\",\"keccak256\":\"0x0abc04b5f293fb6dcad92c9d271f43e7e0d7073a0eec1033352427e212621469\",\"license\":\"MIT\"},\"contracts/interfaces/IRetirementService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n\\nimport { IERC1155ReceiverUpgradeable as IERC1155Receiver } from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\n\\n/**\\n * @title Retirement Service Interface\\n * @author Kai Aldag<kai.aldag@jasmine.energy>\\n * @notice The Retirement Service facilitates the formatting of ERC-1155 transfer data\\n *         parsed by the bridge to attribute retirements to the correct user. It also\\n *         permits users to register smart contracts to receive retirement hooks.\\n * @custom:security-contact dev@jasmine.energy\\n */\\ninterface IRetirementService is IERC1155Receiver {\\n\\n    /**\\n     * @notice Allows user to designate an address to receive retirement hooks.\\n     * @dev Contract must implement IRetirementRecipient's onRetirement function\\n     * @param holder User address to notify recipient address of retirements\\n     * @param recipient Smart contract to receive retirement hooks. Address\\n     * must implement IRetirementRecipient interface.\\n     */\\n    function registerRetirementRecipient(address holder, address recipient) external;\\n\\n}\\n\",\"keccak256\":\"0x801f0d38a2e8ad4a8e4c37f4f0f5099f727c95842e5fc9822d891bdae975d497\",\"license\":\"MIT\"},\"contracts/interfaces/core/IJasmineEAT.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IJasmineEAT is IERC1155 {\\n    function frozen(uint256) external view returns (bool);\\n    function exists(uint256 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe38bb357abc30a6f03a6b6b5f43f209d17f2a359ec079e66803e1f1a1f99af86\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/core/IJasmineMinter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface IJasmineMinter {\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Events\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    event BurnedBatch(\\n        address indexed owner,\\n        uint256[] ids,\\n        uint256[] amounts,\\n        bytes metadata\\n    );\\n\\n    event BurnedSingle(\\n        address indexed owner,\\n        uint256 id,\\n        uint256 amount,\\n        bytes metadata\\n    );\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Mint and Burn Functionality\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    function mint(\\n        address receiver,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory transferData,\\n        bytes memory oracleData,\\n        uint256 deadline,\\n        bytes32 nonce,\\n        bytes memory sig\\n    ) external;\\n\\n    function mintBatch(\\n        address receiver,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory transferData,\\n        bytes[] memory oracleDatas,\\n        uint256 deadline,\\n        bytes32 nonce,\\n        bytes memory sig\\n    ) external;\\n\\n    function burn(uint256 id, uint256 amount, bytes memory metadata) external;\\n\\n    function burnBatch(\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory metadata\\n    ) external;\\n}\\n\",\"keccak256\":\"0x54a2c0955a8d1be48abce545f6de963086616051fd15f2230074642306ef5715\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/errors/JasmineErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title Jasmine Errors\\n * @author Kai Aldag<kai.aldag@jasmine.energy>\\n * @notice Convenience interface for errors omitted by Jasmine's smart contracts\\n * @custom:security-contact dev@jasmine.energy\\n */\\ninterface JasmineErrors {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  General Errors  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n    /// @dev Emitted if input is invalid\\n    error InvalidInput();\\n\\n    /// @dev Emitted if internal validation failed\\n    error ValidationFailed();\\n\\n    /// @dev Emitted if function is disabled\\n    error Disabled();\\n\\n    /// @dev Emitted if contract does not support metadata version\\n    error UnsupportedMetadataVersion(uint8 metadataVersion);\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  Access Control Errors  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n    /// @dev Emitted if access control check fails\\n    error RequiresRole(bytes32 role);\\n\\n    /// @dev Emitted for unauthorized actions\\n    error Prohibited();\\n}\\n\",\"keccak256\":\"0xf7d6476297045c5799a21c24560fa4ffd377209b6a0b617685fe67a076548662\",\"license\":\"MIT\"},\"contracts/libraries/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// solhint-disable no-inline-assembly\\n\\npragma solidity ^0.8.0;\\n\\n//  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  Imports  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\nimport { JasmineErrors } from \\\"../interfaces/errors/JasmineErrors.sol\\\";\\n\\n\\n/**\\n * @title Array Utilities\\n * @author Kai Aldag<kai.aldag@jasmine.energy>\\n * @notice Utility library for interacting with arrays\\n * @custom:security-contact dev@jasmine.energy\\n */\\nlibrary ArrayUtils {\\n\\n    /**\\n     * @dev Sums all elements in an array\\n     * \\n     * @param inputs Array of numbers to sum\\n     * @return total The sum of all elements\\n     */\\n    function sum(uint256[] memory inputs) \\n        internal pure \\n        returns (uint256 total) \\n    {\\n        for (uint256 i = 0; i < inputs.length;) {\\n            total += inputs[i];\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array of `repeatedAddress` with `amount` occurences.\\n     * NOTE: Useful for ERC1155.balanceOfBatch\\n     * \\n     * @param repeatedAddress Input address to duplicate\\n     * @param amount Number of times to duplicate\\n     * @return filledArray Array of length `amount` containing `repeatedAddress`\\n     */\\n    function fill(\\n        address repeatedAddress,\\n        uint256 amount\\n    ) \\n        internal pure \\n        returns (address[] memory filledArray) \\n    {\\n        filledArray = new address[](amount);\\n        for (uint256 i = 0; i < amount;) {\\n            filledArray[i] = repeatedAddress;\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /**\\n     * @dev Slices an array.\\n     * \\n     * Copied from [Bytes Utils](https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol).\\n     * \\n     * @param _bytes Input array to slice\\n     * @param _start Start index to slice from\\n     * @param _length Length of slice\\n     */\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal pure\\n        returns (bytes memory)\\n    {\\n        if ((_length + 31 < _length) || _bytes.length < _start + _length) revert JasmineErrors.ValidationFailed();\\n\\n        bytes memory tempBytes;\\n\\n        // Check length is 0. `iszero` return 1 for `true` and 0 for `false`.\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // Calculate length mod 32 to handle slices that are not a multiple of 32 in size.\\n                let lengthmod := and(_length, 31)\\n\\n                // tempBytes will have the following format in memory: <length><data>\\n                // When copying data we will offset the start forward to avoid allocating additional memory\\n                // Therefore part of the length area will be written, but this will be overwritten later anyways.\\n                // In case no offset is require, the start is set to the data region (0x20 from the tempBytes)\\n                // mc will be used to keep track where to copy the data to.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // Same logic as for mc is applied and additionally the start offset specified for the method is added\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    // increase `mc` and `cc` to read the next word from memory\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // Copy the data from source (cc location) to the slice data (mc location)\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                // Store the length of the slice. This will overwrite any partial data that \\n                // was copied when having slices that are not a multiple of 32.\\n                mstore(tempBytes, _length)\\n\\n                // update free-memory pointer\\n                // allocating the array padded to 32 bytes like the compiler does now\\n                // To set the used memory as a multiple of 32, add 31 to the actual memory usage (mc) \\n                // and remove the modulo 32 (the `and` with `not(31)`)\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            // if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                // zero out the 32 bytes slice we are about to return\\n                // we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                // update free-memory pointer\\n                // tempBytes uses 32 bytes in memory (even when empty) for the length.\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0x47d508eef471462095db896a384e3be3b324c7bf118ce3f28ecbb8b3d3d0acf4\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n//  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  Imports  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\nimport { JasmineErrors } from \\\"../interfaces/errors/JasmineErrors.sol\\\";\\n\\n\\n/**\\n * @title Calldata\\n * @author Kai Aldag<kai.aldag@jasmine.energy>\\n * @notice Utility library encoding and decoding calldata between contracts\\n * @custom:security-contact dev@jasmine.energy\\n */\\nlibrary Calldata {\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Constants\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  Operation Codes  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n    /// @dev Calldata prefix for retirement operations associated with a single user\\n    bytes1 internal constant RETIREMENT_OP = 0x00;\\n\\n    /// @dev Calldata prefix for fractional retirement operations\\n    bytes1 internal constant RETIREMENT_FRACTIONAL_OP = 0x01;\\n\\n    /// @dev Calldata prefix for bridge-off operations\\n    bytes1 internal constant BRIDGE_OFF_OP = 0x10;\\n    \\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n    //  Utility Functions\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  Encoding  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n    /**\\n     * @dev Encodes ERC-1155 transfer data representing a retirement operation to the bridge\\n     * \\n     * @param beneficiary Address to receive the off-chain retirement attribution\\n     * @param hasFractional Whether the retirement is operation includes a fractional component\\n     */\\n    function encodeRetirementData(address beneficiary, bool hasFractional)\\n        internal pure\\n        returns (bytes memory retirementData)\\n    {\\n        return abi.encode(hasFractional ? RETIREMENT_FRACTIONAL_OP : RETIREMENT_OP, beneficiary);\\n    }\\n\\n    /**\\n     * @dev Encodes ERC-1155 transfer data representing a single fractional retirement operation\\n     */\\n    function encodeFractionalRetirementData()\\n        internal pure\\n        returns (bytes memory retirementData)\\n    {\\n        return abi.encode(RETIREMENT_FRACTIONAL_OP);\\n    }\\n\\n    /**\\n     * @dev Encodes ERC-1155 transfer data representing a bridge-off operation to the bridge\\n     * \\n     * @param recipient Address associated with a bridge account to receive outbound certificate\\n     */\\n    function encodeBridgeOffData(address recipient)\\n        internal pure\\n        returns (bytes memory bridgeOffData)\\n    {\\n        return abi.encode(BRIDGE_OFF_OP, recipient);\\n    }\\n\\n\\n    //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  Decoding  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500  \\\\\\\\\\n\\n    /**\\n     * @dev Parses ERC-1155 transfer data to determine if it is a retirement operation\\n     * \\n     * @param data Calldata to decode \\n     */\\n    function isRetirementOperation(bytes memory data)\\n        internal pure\\n        returns (bool isRetirement, bool hasFractional)\\n    {\\n        if (data.length == 0) revert JasmineErrors.InvalidInput();\\n        bytes1 opCode = data[0];\\n        return (\\n            opCode == RETIREMENT_OP || opCode == RETIREMENT_FRACTIONAL_OP,\\n            opCode == RETIREMENT_FRACTIONAL_OP\\n        );\\n    }\\n\\n    /**\\n     * @dev Parses ERC-1155 transfer data to determine if it is a bridge-off operation\\n     * \\n     * @param data Calldata to decode \\n     */\\n    function isBridgeOffOperation(bytes memory data)\\n        internal pure\\n        returns (bool isBridgeOff)\\n    {\\n        if (data.length == 0) revert JasmineErrors.InvalidInput();\\n        bytes1 opCode = data[0];\\n        return opCode == BRIDGE_OFF_OP;\\n    }\\n}\\n\",\"keccak256\":\"0xf46396bcb53a3f7cc8743560ef54fc9ee0c9d215fe302d9df6f5f86380788de3\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e0604052306080523480156200001557600080fd5b50604051620022e0380380620022e083398101604081905262000038916200006d565b6001600160a01b0391821660a0521660c052620000a5565b80516001600160a01b03811681146200006857600080fd5b919050565b600080604083850312156200008157600080fd5b6200008c8362000050565b91506200009c6020840162000050565b90509250929050565b60805160a05160c0516121a26200013e600039600081816101b30152818161072901528181610a280152610ada01526000818161017f015281816107ad015281816109f901528181610b5e015281816110ca015281816112df015261147001526000818161038d015281816103d601528181610475015281816104b50152818161054801528181610914015261095401526121a26000f3fe6080604052600436106100f35760003560e01c806379ba50971161008a578063c4d66de811610059578063c4d66de8146102ce578063e30c3978146102ee578063f23a6e611461030c578063f2fde38b1461032c57600080fd5b806379ba5097146102425780638da5cb5b14610257578063904bd23e14610275578063bc197c811461029557600080fd5b80633659cfe6116100c65780633659cfe6146101d55780634f1ef286146101f757806352d1902d1461020a578063715018a61461022d57600080fd5b8063013eb177146100f857806301ffc9a71461013d578063075461721461016d578063340a2a4e146101a1575b600080fd5b34801561010457600080fd5b50610120731820a4b7618bde71dce8cdc73aab6c95905fad2481565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014957600080fd5b5061015d610158366004611a12565b61034c565b6040519015158152602001610134565b34801561017957600080fd5b506101207f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ad57600080fd5b506101207f000000000000000000000000000000000000000000000000000000000000000081565b3480156101e157600080fd5b506101f56101f0366004611a51565b610383565b005b6101f5610205366004611b25565b61046b565b34801561021657600080fd5b5061021f61053b565b604051908152602001610134565b34801561023957600080fd5b506101f56105ee565b34801561024e57600080fd5b506101f5610602565b34801561026357600080fd5b506097546001600160a01b0316610120565b34801561028157600080fd5b506101f5610290366004611b75565b610679565b3480156102a157600080fd5b506102b56102b0366004611c3d565b61071c565b6040516001600160e01b03199091168152602001610134565b3480156102da57600080fd5b506101f56102e9366004611a51565b61084a565b3480156102fa57600080fd5b5060c9546001600160a01b0316610120565b34801561031857600080fd5b506102b5610327366004611ceb565b610acd565b34801561033857600080fd5b506101f5610347366004611a51565b610bfb565b60006001600160e01b03198216630271189760e51b148061037d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103d45760405162461bcd60e51b81526004016103cb90611d54565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661041d600080516020612126833981519152546001600160a01b031690565b6001600160a01b0316146104435760405162461bcd60e51b81526004016103cb90611da0565b61044c81610c6c565b6040805160008082526020820190925261046891839190610c74565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104b35760405162461bcd60e51b81526004016103cb90611d54565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104fc600080516020612126833981519152546001600160a01b031690565b6001600160a01b0316146105225760405162461bcd60e51b81526004016103cb90611da0565b61052b82610c6c565b61053782826001610c74565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105db5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016103cb565b5060008051602061212683398151915290565b6105f6610de4565b6106006000610e3e565b565b60c95433906001600160a01b031681146106705760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016103cb565b61046881610e3e565b731820a4b7618bde71dce8cdc73aab6c95905fad246329965a1d6001600160a01b038416156106a857836106aa565b335b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152631f7e364f60e21b60248201529084166044820152606401600060405180830381600087803b15801561070057600080fd5b505af1158015610714573d6000803e3d6000fd5b505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461076757604051632b0039c760e21b815260040160405180910390fd5b8151156108205760008061077a84610e57565b915091508115610796576107918787878488610ed7565b610819565b6040516338243e8f60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e090fa3c906107e690899089908990600401611e77565b600060405180830381600087803b15801561080057600080fd5b505af1158015610814573d6000803e3d6000fd5b505050505b5050610838565b61083885858560006108338a6000611147565b610ed7565b5063bc197c8160e01b95945050505050565b600054610100900460ff161580801561086a5750600054600160ff909116105b806108845750303b158015610884575060005460ff166001145b6108e75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103cb565b6000805460ff19166001179055801561090a576000805461ff0019166101001790555b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109525760405162461bcd60e51b81526004016103cb90611d54565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661099b600080516020612126833981519152546001600160a01b031690565b6001600160a01b0316146109c15760405162461bcd60e51b81526004016103cb90611da0565b6109ca82610e3e565b6109d2611198565b6109da6111bf565b6109e2611198565b60405163a22cb46560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600160248301527f0000000000000000000000000000000000000000000000000000000000000000169063a22cb46590604401600060405180830381600087803b158015610a6c57600080fd5b505af1158015610a80573d6000803e3d6000fd5b505050508015610537576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b1857604051632b0039c760e21b815260040160405180910390fd5b815115610bd157600080610b2b84610e57565b915091508115610b4757610b4287878784886111ee565b610bca565b6040516380a5a37160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906380a5a37190610b9790899089908990600401611eb0565b600060405180830381600087803b158015610bb157600080fd5b505af1158015610bc5573d6000803e3d6000fd5b505050505b5050610be9565b610be98585856000610be48a6000611147565b6111ee565b5063f23a6e6160e01b95945050505050565b610c03610de4565b60c980546001600160a01b0383166001600160a01b03199091168117909155610c346097546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b610468610de4565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610cac57610ca783611355565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d06575060408051601f3d908101601f19168201909252610d0391810190611ed8565b60015b610d695760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016103cb565b6000805160206121268339815191528114610dd85760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016103cb565b50610ca78383836113f1565b6097546001600160a01b031633146106005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103cb565b60c980546001600160a01b03191690556104688161141c565b6000808251600003610e7c5760405163b4fa3fb360e01b815260040160405180910390fd5b600083600081518110610e9157610e91611ef1565b01602001516001600160f81b0319169050801580610ebc57506001600160f81b03198116600160f81b145b946001600160f81b031991909116600160f81b149350915050565b82518451141580610ee757508351155b15610f055760405163b4fa3fb360e01b815260040160405180910390fd5b6002815110610f2b5780806020019051810190610f229190611f07565b9550610f739050565b8051600103610f5d578085604051602001610f47929190611f43565b6040516020818303038152906040529050610f73565b8051600003610f7357610f708583611147565b90505b81156110b357610f9c84600081518110610f8f57610f8f611ef1565b602002602001015161146e565b600060f81b81600081518110610fb457610fb4611ef1565b60200101906001600160f81b031916908160001a90535082600081518110610fde57610fde611ef1565b602002602001015160010361108d57611024846040516020016110019190611f7a565b604051602081830303815290604052600180875161101f9190611fa3565b611515565b8060200190518101906110379190611fb6565b935061106b8360405160200161104d9190611f7a565b604051602081830303815290604052600180865161101f9190611fa3565b80602001905181019061107e9190611fb6565b845190935015611140576110b3565b826000815181106110a0576110a0611ef1565b6020908102919091010180516000190190525b6040516338243e8f60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e090fa3c9061110390879087908690600401611e77565b600060405180830381600087803b15801561111d57600080fd5b505af1158015611131573d6000803e3d6000fd5b505050506111408585856115c8565b5050505050565b60608161115557600061115b565b600160f81b5b604080516001600160f81b031990921660208301526001600160a01b03851690820152606001604051602081830303815290604052905092915050565b600054610100900460ff166106005760405162461bcd60e51b81526004016103cb90612047565b600054610100900460ff166111e65760405162461bcd60e51b81526004016103cb90612047565b6106006116cb565b8260000361120f5760405163b4fa3fb360e01b815260040160405180910390fd5b6002815110611235578080602001905181019061122c9190611f07565b955061127d9050565b8051600103611267578085604051602001611251929190611f43565b604051602081830303815290604052905061127d565b805160000361127d5761127a8583611147565b90505b81156112c85761128c8461146e565b6001831461114057805160001990930192600090829082906112b0576112b0611ef1565b60200101906001600160f81b031916908160001a9053505b6040516380a5a37160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906380a5a3719061131890879087908690600401611eb0565b600060405180830381600087803b15801561133257600080fd5b505af1158015611346573d6000803e3d6000fd5b505050506111408585856116fb565b6001600160a01b0381163b6113c25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016103cb565b60008051602061212683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6113fa83611883565b6000825111806114075750805b15610ca75761141683836118c3565b50505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380a5a3718260016114c960408051600160f81b602082015260609101604051602081830303815290604052905090565b6040518463ffffffff1660e01b81526004016114e793929190611eb0565b600060405180830381600087803b15801561150157600080fd5b505af1158015611140573d6000803e3d6000fd5b60608161152381601f612092565b108061153857506115348284612092565b8451105b1561155657604051630a0b0d7960e01b815260040160405180910390fd5b60608215801561157557604051915060008252602082016040526115bf565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156115ae578051835260209283019201611596565b5050858452601f01601f1916604052505b50949350505050565b60405163555ddc6560e11b81526001600160a01b0384166004820152631f7e364f60e21b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165491906120a5565b90506001600160a01b0381161561141657604051631f7e364f60e21b81526001600160a01b03821690637df8d93c90611695908790879087906004016120c2565b600060405180830381600087803b1580156116af57600080fd5b505af19250505080156116c0575060015b156114165750505050565b600054610100900460ff166116f25760405162461bcd60e51b81526004016103cb90612047565b61060033610e3e565b60405163555ddc6560e11b81526001600160a01b0384166004820152631f7e364f60e21b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015611763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178791906120a5565b90506001600160a01b0381161561141657604080516001808252818301909252600091829190602080830190803683375050604080516001808252818301909252915060208083019080368337019050509150915084826000815181106117f0576117f0611ef1565b602002602001018181525050838160008151811061181057611810611ef1565b6020908102919091010152604051631f7e364f60e21b81526001600160a01b03841690637df8d93c9061184b908990869086906004016120c2565b600060405180830381600087803b15801561186557600080fd5b505af1925050508015611876575060015b1561071457505050505050565b61188c81611355565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606118e88383604051806060016040528060278152602001612146602791396118ef565b9392505050565b6060600080856001600160a01b03168560405161190c91906120f6565b600060405180830381855af49150503d8060008114611947576040519150601f19603f3d011682016040523d82523d6000602084013e61194c565b606091505b509150915061195d86838387611967565b9695505050505050565b606083156119d65782516000036119cf576001600160a01b0385163b6119cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103cb565b50816119e0565b6119e083836119e8565b949350505050565b8151156119f85781518083602001fd5b8060405162461bcd60e51b81526004016103cb9190612112565b600060208284031215611a2457600080fd5b81356001600160e01b0319811681146118e857600080fd5b6001600160a01b038116811461046857600080fd5b600060208284031215611a6357600080fd5b81356118e881611a3c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611aad57611aad611a6e565b604052919050565b600082601f830112611ac657600080fd5b813567ffffffffffffffff811115611ae057611ae0611a6e565b611af3601f8201601f1916602001611a84565b818152846020838601011115611b0857600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611b3857600080fd5b8235611b4381611a3c565b9150602083013567ffffffffffffffff811115611b5f57600080fd5b611b6b85828601611ab5565b9150509250929050565b60008060408385031215611b8857600080fd5b8235611b9381611a3c565b91506020830135611ba381611a3c565b809150509250929050565b600067ffffffffffffffff821115611bc857611bc8611a6e565b5060051b60200190565b600082601f830112611be357600080fd5b81356020611bf8611bf383611bae565b611a84565b82815260059290921b84018101918181019086841115611c1757600080fd5b8286015b84811015611c325780358352918301918301611c1b565b509695505050505050565b600080600080600060a08688031215611c5557600080fd5b8535611c6081611a3c565b94506020860135611c7081611a3c565b9350604086013567ffffffffffffffff80821115611c8d57600080fd5b611c9989838a01611bd2565b94506060880135915080821115611caf57600080fd5b611cbb89838a01611bd2565b93506080880135915080821115611cd157600080fd5b50611cde88828901611ab5565b9150509295509295909350565b600080600080600060a08688031215611d0357600080fd5b8535611d0e81611a3c565b94506020860135611d1e81611a3c565b93506040860135925060608601359150608086013567ffffffffffffffff811115611d4857600080fd5b611cde88828901611ab5565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600081518084526020808501945080840160005b83811015611e1c57815187529582019590820190600101611e00565b509495945050505050565b60005b83811015611e42578181015183820152602001611e2a565b50506000910152565b60008151808452611e63816020860160208601611e27565b601f01601f19169290920160200192915050565b606081526000611e8a6060830186611dec565b8281036020840152611e9c8186611dec565b9050828103604084015261195d8185611e4b565b838152826020820152606060408201526000611ecf6060830184611e4b565b95945050505050565b600060208284031215611eea57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008060408385031215611f1a57600080fd5b82516001600160f81b031981168114611f3257600080fd5b6020840151909250611ba381611a3c565b60008351611f55818460208801611e27565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b6020815260006118e86020830184611dec565b634e487b7160e01b600052601160045260246000fd5b8181038181111561037d5761037d611f8d565b60006020808385031215611fc957600080fd5b825167ffffffffffffffff811115611fe057600080fd5b8301601f81018513611ff157600080fd5b8051611fff611bf382611bae565b81815260059190911b8201830190838101908783111561201e57600080fd5b928401925b8284101561203c57835182529284019290840190612023565b979650505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8082018082111561037d5761037d611f8d565b6000602082840312156120b757600080fd5b81516118e881611a3c565b6001600160a01b03841681526060602082015260006120e46060830185611dec565b828103604084015261195d8185611dec565b60008251612108818460208701611e27565b9190910192915050565b6020815260006118e86020830184611e4b56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220979c4cbcb42e733da1c844669153a7633c52cead0cf50f2f950d1156885296d364736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806379ba50971161008a578063c4d66de811610059578063c4d66de8146102ce578063e30c3978146102ee578063f23a6e611461030c578063f2fde38b1461032c57600080fd5b806379ba5097146102425780638da5cb5b14610257578063904bd23e14610275578063bc197c811461029557600080fd5b80633659cfe6116100c65780633659cfe6146101d55780634f1ef286146101f757806352d1902d1461020a578063715018a61461022d57600080fd5b8063013eb177146100f857806301ffc9a71461013d578063075461721461016d578063340a2a4e146101a1575b600080fd5b34801561010457600080fd5b50610120731820a4b7618bde71dce8cdc73aab6c95905fad2481565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014957600080fd5b5061015d610158366004611a12565b61034c565b6040519015158152602001610134565b34801561017957600080fd5b506101207f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ad57600080fd5b506101207f000000000000000000000000000000000000000000000000000000000000000081565b3480156101e157600080fd5b506101f56101f0366004611a51565b610383565b005b6101f5610205366004611b25565b61046b565b34801561021657600080fd5b5061021f61053b565b604051908152602001610134565b34801561023957600080fd5b506101f56105ee565b34801561024e57600080fd5b506101f5610602565b34801561026357600080fd5b506097546001600160a01b0316610120565b34801561028157600080fd5b506101f5610290366004611b75565b610679565b3480156102a157600080fd5b506102b56102b0366004611c3d565b61071c565b6040516001600160e01b03199091168152602001610134565b3480156102da57600080fd5b506101f56102e9366004611a51565b61084a565b3480156102fa57600080fd5b5060c9546001600160a01b0316610120565b34801561031857600080fd5b506102b5610327366004611ceb565b610acd565b34801561033857600080fd5b506101f5610347366004611a51565b610bfb565b60006001600160e01b03198216630271189760e51b148061037d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103d45760405162461bcd60e51b81526004016103cb90611d54565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661041d600080516020612126833981519152546001600160a01b031690565b6001600160a01b0316146104435760405162461bcd60e51b81526004016103cb90611da0565b61044c81610c6c565b6040805160008082526020820190925261046891839190610c74565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104b35760405162461bcd60e51b81526004016103cb90611d54565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104fc600080516020612126833981519152546001600160a01b031690565b6001600160a01b0316146105225760405162461bcd60e51b81526004016103cb90611da0565b61052b82610c6c565b61053782826001610c74565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105db5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016103cb565b5060008051602061212683398151915290565b6105f6610de4565b6106006000610e3e565b565b60c95433906001600160a01b031681146106705760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016103cb565b61046881610e3e565b731820a4b7618bde71dce8cdc73aab6c95905fad246329965a1d6001600160a01b038416156106a857836106aa565b335b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152631f7e364f60e21b60248201529084166044820152606401600060405180830381600087803b15801561070057600080fd5b505af1158015610714573d6000803e3d6000fd5b505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461076757604051632b0039c760e21b815260040160405180910390fd5b8151156108205760008061077a84610e57565b915091508115610796576107918787878488610ed7565b610819565b6040516338243e8f60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e090fa3c906107e690899089908990600401611e77565b600060405180830381600087803b15801561080057600080fd5b505af1158015610814573d6000803e3d6000fd5b505050505b5050610838565b61083885858560006108338a6000611147565b610ed7565b5063bc197c8160e01b95945050505050565b600054610100900460ff161580801561086a5750600054600160ff909116105b806108845750303b158015610884575060005460ff166001145b6108e75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103cb565b6000805460ff19166001179055801561090a576000805461ff0019166101001790555b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109525760405162461bcd60e51b81526004016103cb90611d54565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661099b600080516020612126833981519152546001600160a01b031690565b6001600160a01b0316146109c15760405162461bcd60e51b81526004016103cb90611da0565b6109ca82610e3e565b6109d2611198565b6109da6111bf565b6109e2611198565b60405163a22cb46560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600160248301527f0000000000000000000000000000000000000000000000000000000000000000169063a22cb46590604401600060405180830381600087803b158015610a6c57600080fd5b505af1158015610a80573d6000803e3d6000fd5b505050508015610537576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b1857604051632b0039c760e21b815260040160405180910390fd5b815115610bd157600080610b2b84610e57565b915091508115610b4757610b4287878784886111ee565b610bca565b6040516380a5a37160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906380a5a37190610b9790899089908990600401611eb0565b600060405180830381600087803b158015610bb157600080fd5b505af1158015610bc5573d6000803e3d6000fd5b505050505b5050610be9565b610be98585856000610be48a6000611147565b6111ee565b5063f23a6e6160e01b95945050505050565b610c03610de4565b60c980546001600160a01b0383166001600160a01b03199091168117909155610c346097546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b610468610de4565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610cac57610ca783611355565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d06575060408051601f3d908101601f19168201909252610d0391810190611ed8565b60015b610d695760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016103cb565b6000805160206121268339815191528114610dd85760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016103cb565b50610ca78383836113f1565b6097546001600160a01b031633146106005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103cb565b60c980546001600160a01b03191690556104688161141c565b6000808251600003610e7c5760405163b4fa3fb360e01b815260040160405180910390fd5b600083600081518110610e9157610e91611ef1565b01602001516001600160f81b0319169050801580610ebc57506001600160f81b03198116600160f81b145b946001600160f81b031991909116600160f81b149350915050565b82518451141580610ee757508351155b15610f055760405163b4fa3fb360e01b815260040160405180910390fd5b6002815110610f2b5780806020019051810190610f229190611f07565b9550610f739050565b8051600103610f5d578085604051602001610f47929190611f43565b6040516020818303038152906040529050610f73565b8051600003610f7357610f708583611147565b90505b81156110b357610f9c84600081518110610f8f57610f8f611ef1565b602002602001015161146e565b600060f81b81600081518110610fb457610fb4611ef1565b60200101906001600160f81b031916908160001a90535082600081518110610fde57610fde611ef1565b602002602001015160010361108d57611024846040516020016110019190611f7a565b604051602081830303815290604052600180875161101f9190611fa3565b611515565b8060200190518101906110379190611fb6565b935061106b8360405160200161104d9190611f7a565b604051602081830303815290604052600180865161101f9190611fa3565b80602001905181019061107e9190611fb6565b845190935015611140576110b3565b826000815181106110a0576110a0611ef1565b6020908102919091010180516000190190525b6040516338243e8f60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e090fa3c9061110390879087908690600401611e77565b600060405180830381600087803b15801561111d57600080fd5b505af1158015611131573d6000803e3d6000fd5b505050506111408585856115c8565b5050505050565b60608161115557600061115b565b600160f81b5b604080516001600160f81b031990921660208301526001600160a01b03851690820152606001604051602081830303815290604052905092915050565b600054610100900460ff166106005760405162461bcd60e51b81526004016103cb90612047565b600054610100900460ff166111e65760405162461bcd60e51b81526004016103cb90612047565b6106006116cb565b8260000361120f5760405163b4fa3fb360e01b815260040160405180910390fd5b6002815110611235578080602001905181019061122c9190611f07565b955061127d9050565b8051600103611267578085604051602001611251929190611f43565b604051602081830303815290604052905061127d565b805160000361127d5761127a8583611147565b90505b81156112c85761128c8461146e565b6001831461114057805160001990930192600090829082906112b0576112b0611ef1565b60200101906001600160f81b031916908160001a9053505b6040516380a5a37160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906380a5a3719061131890879087908690600401611eb0565b600060405180830381600087803b15801561133257600080fd5b505af1158015611346573d6000803e3d6000fd5b505050506111408585856116fb565b6001600160a01b0381163b6113c25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016103cb565b60008051602061212683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6113fa83611883565b6000825111806114075750805b15610ca75761141683836118c3565b50505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380a5a3718260016114c960408051600160f81b602082015260609101604051602081830303815290604052905090565b6040518463ffffffff1660e01b81526004016114e793929190611eb0565b600060405180830381600087803b15801561150157600080fd5b505af1158015611140573d6000803e3d6000fd5b60608161152381601f612092565b108061153857506115348284612092565b8451105b1561155657604051630a0b0d7960e01b815260040160405180910390fd5b60608215801561157557604051915060008252602082016040526115bf565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156115ae578051835260209283019201611596565b5050858452601f01601f1916604052505b50949350505050565b60405163555ddc6560e11b81526001600160a01b0384166004820152631f7e364f60e21b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165491906120a5565b90506001600160a01b0381161561141657604051631f7e364f60e21b81526001600160a01b03821690637df8d93c90611695908790879087906004016120c2565b600060405180830381600087803b1580156116af57600080fd5b505af19250505080156116c0575060015b156114165750505050565b600054610100900460ff166116f25760405162461bcd60e51b81526004016103cb90612047565b61060033610e3e565b60405163555ddc6560e11b81526001600160a01b0384166004820152631f7e364f60e21b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015611763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178791906120a5565b90506001600160a01b0381161561141657604080516001808252818301909252600091829190602080830190803683375050604080516001808252818301909252915060208083019080368337019050509150915084826000815181106117f0576117f0611ef1565b602002602001018181525050838160008151811061181057611810611ef1565b6020908102919091010152604051631f7e364f60e21b81526001600160a01b03841690637df8d93c9061184b908990869086906004016120c2565b600060405180830381600087803b15801561186557600080fd5b505af1925050508015611876575060015b1561071457505050505050565b61188c81611355565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606118e88383604051806060016040528060278152602001612146602791396118ef565b9392505050565b6060600080856001600160a01b03168560405161190c91906120f6565b600060405180830381855af49150503d8060008114611947576040519150601f19603f3d011682016040523d82523d6000602084013e61194c565b606091505b509150915061195d86838387611967565b9695505050505050565b606083156119d65782516000036119cf576001600160a01b0385163b6119cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103cb565b50816119e0565b6119e083836119e8565b949350505050565b8151156119f85781518083602001fd5b8060405162461bcd60e51b81526004016103cb9190612112565b600060208284031215611a2457600080fd5b81356001600160e01b0319811681146118e857600080fd5b6001600160a01b038116811461046857600080fd5b600060208284031215611a6357600080fd5b81356118e881611a3c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611aad57611aad611a6e565b604052919050565b600082601f830112611ac657600080fd5b813567ffffffffffffffff811115611ae057611ae0611a6e565b611af3601f8201601f1916602001611a84565b818152846020838601011115611b0857600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611b3857600080fd5b8235611b4381611a3c565b9150602083013567ffffffffffffffff811115611b5f57600080fd5b611b6b85828601611ab5565b9150509250929050565b60008060408385031215611b8857600080fd5b8235611b9381611a3c565b91506020830135611ba381611a3c565b809150509250929050565b600067ffffffffffffffff821115611bc857611bc8611a6e565b5060051b60200190565b600082601f830112611be357600080fd5b81356020611bf8611bf383611bae565b611a84565b82815260059290921b84018101918181019086841115611c1757600080fd5b8286015b84811015611c325780358352918301918301611c1b565b509695505050505050565b600080600080600060a08688031215611c5557600080fd5b8535611c6081611a3c565b94506020860135611c7081611a3c565b9350604086013567ffffffffffffffff80821115611c8d57600080fd5b611c9989838a01611bd2565b94506060880135915080821115611caf57600080fd5b611cbb89838a01611bd2565b93506080880135915080821115611cd157600080fd5b50611cde88828901611ab5565b9150509295509295909350565b600080600080600060a08688031215611d0357600080fd5b8535611d0e81611a3c565b94506020860135611d1e81611a3c565b93506040860135925060608601359150608086013567ffffffffffffffff811115611d4857600080fd5b611cde88828901611ab5565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600081518084526020808501945080840160005b83811015611e1c57815187529582019590820190600101611e00565b509495945050505050565b60005b83811015611e42578181015183820152602001611e2a565b50506000910152565b60008151808452611e63816020860160208601611e27565b601f01601f19169290920160200192915050565b606081526000611e8a6060830186611dec565b8281036020840152611e9c8186611dec565b9050828103604084015261195d8185611e4b565b838152826020820152606060408201526000611ecf6060830184611e4b565b95945050505050565b600060208284031215611eea57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008060408385031215611f1a57600080fd5b82516001600160f81b031981168114611f3257600080fd5b6020840151909250611ba381611a3c565b60008351611f55818460208801611e27565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b6020815260006118e86020830184611dec565b634e487b7160e01b600052601160045260246000fd5b8181038181111561037d5761037d611f8d565b60006020808385031215611fc957600080fd5b825167ffffffffffffffff811115611fe057600080fd5b8301601f81018513611ff157600080fd5b8051611fff611bf382611bae565b81815260059190911b8201830190838101908783111561201e57600080fd5b928401925b8284101561203c57835182529284019290840190612023565b979650505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8082018082111561037d5761037d611f8d565b6000602082840312156120b757600080fd5b81516118e881611a3c565b6001600160a01b03841681526060602082015260006120e46060830185611dec565b828103604084015261195d8185611dec565b60008251612108818460208701611e27565b9190910192915050565b6020815260006118e86020830184611e4b56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220979c4cbcb42e733da1c844669153a7633c52cead0cf50f2f950d1156885296d364736f6c63430008140033",
  "devdoc": {
    "author": "Kai Aldag<kai.aldag@jasmine.energy>",
    "custom:security-contact": "dev@jasmine.energy",
    "errors": {
      "Disabled()": [
        {
          "details": "Emitted if function is disabled"
        }
      ],
      "InvalidInput()": [
        {
          "details": "Emitted if input is invalid"
        }
      ],
      "Prohibited()": [
        {
          "details": "Emitted for unauthorized actions"
        }
      ],
      "RequiresRole(bytes32)": [
        {
          "details": "Emitted if access control check fails"
        }
      ],
      "UnsupportedMetadataVersion(uint8)": [
        {
          "details": "Emitted if contract does not support metadata version"
        }
      ],
      "ValidationFailed()": [
        {
          "details": "Emitted if internal validation failed"
        }
      ]
    },
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "inheritdoc ERC1155Receiver"
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "inheritdoc ERC1155Receiver"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "registerRetirementRecipient(address,address)": {
        "details": "Requirements:      - Retirement service must be an approved ERC-1820 manager of account      - Implementer must support IRetirementRecipient interface via ERC-165 ",
        "params": {
          "account": "Address to register retirement recipient for",
          "implementer": "Smart contract address to register as retirement implementer"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "Jasmine Retirement Service",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "registerRetirementRecipient(address,address)": {
        "notice": "Registers a smart contract to receive notifications on retirement events "
      }
    },
    "notice": "Facilitates retirements of EATs and JLTs in the Jasmine protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1018,
        "contract": "contracts/JasmineRetirementService.sol:JasmineRetirementService",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1021,
        "contract": "contracts/JasmineRetirementService.sol:JasmineRetirementService",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2165,
        "contract": "contracts/JasmineRetirementService.sol:JasmineRetirementService",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1410,
        "contract": "contracts/JasmineRetirementService.sol:JasmineRetirementService",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1782,
        "contract": "contracts/JasmineRetirementService.sol:JasmineRetirementService",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 525,
        "contract": "contracts/JasmineRetirementService.sol:JasmineRetirementService",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 645,
        "contract": "contracts/JasmineRetirementService.sol:JasmineRetirementService",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 434,
        "contract": "contracts/JasmineRetirementService.sol:JasmineRetirementService",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 513,
        "contract": "contracts/JasmineRetirementService.sol:JasmineRetirementService",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1000,
        "contract": "contracts/JasmineRetirementService.sol:JasmineRetirementService",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1315,
        "contract": "contracts/JasmineRetirementService.sol:JasmineRetirementService",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}