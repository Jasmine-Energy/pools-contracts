/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../../common";

export interface CryticERC20ExternalBasicPropertiesInterface
  extends utils.Interface {
  functions: {
    "test_ERC20external_constantSupply()": FunctionFragment;
    "test_ERC20external_selfTransfer(uint256)": FunctionFragment;
    "test_ERC20external_selfTransferFrom(uint256)": FunctionFragment;
    "test_ERC20external_setAllowance(address,uint256)": FunctionFragment;
    "test_ERC20external_setAllowanceTwice(address,uint256)": FunctionFragment;
    "test_ERC20external_spendAllowanceAfterTransfer(address,uint256)": FunctionFragment;
    "test_ERC20external_transfer(address,uint256)": FunctionFragment;
    "test_ERC20external_transferFrom(address,uint256)": FunctionFragment;
    "test_ERC20external_transferFromMoreThanBalance(address)": FunctionFragment;
    "test_ERC20external_transferFromToZeroAddress(uint256)": FunctionFragment;
    "test_ERC20external_transferFromZeroAmount(address)": FunctionFragment;
    "test_ERC20external_transferMoreThanBalance(address)": FunctionFragment;
    "test_ERC20external_transferToZeroAddress()": FunctionFragment;
    "test_ERC20external_transferZeroAmount(address)": FunctionFragment;
    "test_ERC20external_userBalanceNotHigherThanSupply()": FunctionFragment;
    "test_ERC20external_userBalancesLessThanTotalSupply()": FunctionFragment;
    "test_ERC20external_zeroAddressBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "test_ERC20external_constantSupply"
      | "test_ERC20external_selfTransfer"
      | "test_ERC20external_selfTransferFrom"
      | "test_ERC20external_setAllowance"
      | "test_ERC20external_setAllowanceTwice"
      | "test_ERC20external_spendAllowanceAfterTransfer"
      | "test_ERC20external_transfer"
      | "test_ERC20external_transferFrom"
      | "test_ERC20external_transferFromMoreThanBalance"
      | "test_ERC20external_transferFromToZeroAddress"
      | "test_ERC20external_transferFromZeroAmount"
      | "test_ERC20external_transferMoreThanBalance"
      | "test_ERC20external_transferToZeroAddress"
      | "test_ERC20external_transferZeroAmount"
      | "test_ERC20external_userBalanceNotHigherThanSupply"
      | "test_ERC20external_userBalancesLessThanTotalSupply"
      | "test_ERC20external_zeroAddressBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "test_ERC20external_constantSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_selfTransfer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_selfTransferFrom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_setAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_setAllowanceTwice",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_spendAllowanceAfterTransfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_transferFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_transferFromMoreThanBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_transferFromToZeroAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_transferFromZeroAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_transferMoreThanBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_transferToZeroAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_transferZeroAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_userBalanceNotHigherThanSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_userBalancesLessThanTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_ERC20external_zeroAddressBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "test_ERC20external_constantSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_selfTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_selfTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_setAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_setAllowanceTwice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_spendAllowanceAfterTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_transferFromMoreThanBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_transferFromToZeroAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_transferFromZeroAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_transferMoreThanBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_transferToZeroAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_transferZeroAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_userBalanceNotHigherThanSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_userBalancesLessThanTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_ERC20external_zeroAddressBalance",
    data: BytesLike
  ): Result;

  events: {
    "AssertEqFail(string)": EventFragment;
    "AssertFail(string)": EventFragment;
    "AssertGtFail(string)": EventFragment;
    "AssertGteFail(string)": EventFragment;
    "AssertLtFail(string)": EventFragment;
    "AssertLteFail(string)": EventFragment;
    "AssertNeqFail(string)": EventFragment;
    "LogAddress(string,address)": EventFragment;
    "LogString(string)": EventFragment;
    "LogUint256(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssertEqFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertGtFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertGteFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertLtFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertLteFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertNeqFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogString"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUint256"): EventFragment;
}

export interface AssertEqFailEventObject {
  arg0: string;
}
export type AssertEqFailEvent = TypedEvent<[string], AssertEqFailEventObject>;

export type AssertEqFailEventFilter = TypedEventFilter<AssertEqFailEvent>;

export interface AssertFailEventObject {
  arg0: string;
}
export type AssertFailEvent = TypedEvent<[string], AssertFailEventObject>;

export type AssertFailEventFilter = TypedEventFilter<AssertFailEvent>;

export interface AssertGtFailEventObject {
  arg0: string;
}
export type AssertGtFailEvent = TypedEvent<[string], AssertGtFailEventObject>;

export type AssertGtFailEventFilter = TypedEventFilter<AssertGtFailEvent>;

export interface AssertGteFailEventObject {
  arg0: string;
}
export type AssertGteFailEvent = TypedEvent<[string], AssertGteFailEventObject>;

export type AssertGteFailEventFilter = TypedEventFilter<AssertGteFailEvent>;

export interface AssertLtFailEventObject {
  arg0: string;
}
export type AssertLtFailEvent = TypedEvent<[string], AssertLtFailEventObject>;

export type AssertLtFailEventFilter = TypedEventFilter<AssertLtFailEvent>;

export interface AssertLteFailEventObject {
  arg0: string;
}
export type AssertLteFailEvent = TypedEvent<[string], AssertLteFailEventObject>;

export type AssertLteFailEventFilter = TypedEventFilter<AssertLteFailEvent>;

export interface AssertNeqFailEventObject {
  arg0: string;
}
export type AssertNeqFailEvent = TypedEvent<[string], AssertNeqFailEventObject>;

export type AssertNeqFailEventFilter = TypedEventFilter<AssertNeqFailEvent>;

export interface LogAddressEventObject {
  arg0: string;
  arg1: string;
}
export type LogAddressEvent = TypedEvent<
  [string, string],
  LogAddressEventObject
>;

export type LogAddressEventFilter = TypedEventFilter<LogAddressEvent>;

export interface LogStringEventObject {
  arg0: string;
}
export type LogStringEvent = TypedEvent<[string], LogStringEventObject>;

export type LogStringEventFilter = TypedEventFilter<LogStringEvent>;

export interface LogUint256EventObject {
  arg0: string;
  arg1: BigNumber;
}
export type LogUint256Event = TypedEvent<
  [string, BigNumber],
  LogUint256EventObject
>;

export type LogUint256EventFilter = TypedEventFilter<LogUint256Event>;

export interface CryticERC20ExternalBasicProperties extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CryticERC20ExternalBasicPropertiesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    test_ERC20external_constantSupply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_selfTransfer(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_selfTransferFrom(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_setAllowance(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_setAllowanceTwice(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_spendAllowanceAfterTransfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_transfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_transferFrom(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_transferFromMoreThanBalance(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_transferFromToZeroAddress(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_transferFromZeroAmount(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_transferMoreThanBalance(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_transferToZeroAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_transferZeroAmount(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_userBalanceNotHigherThanSupply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_userBalancesLessThanTotalSupply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_ERC20external_zeroAddressBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  test_ERC20external_constantSupply(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_selfTransfer(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_selfTransferFrom(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_setAllowance(
    target: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_setAllowanceTwice(
    target: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_spendAllowanceAfterTransfer(
    target: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_transfer(
    target: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_transferFrom(
    target: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_transferFromMoreThanBalance(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_transferFromToZeroAddress(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_transferFromZeroAmount(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_transferMoreThanBalance(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_transferToZeroAddress(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_transferZeroAmount(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_userBalanceNotHigherThanSupply(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_userBalancesLessThanTotalSupply(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_ERC20external_zeroAddressBalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    test_ERC20external_constantSupply(overrides?: CallOverrides): Promise<void>;

    test_ERC20external_selfTransfer(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_selfTransferFrom(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_setAllowance(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_setAllowanceTwice(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_spendAllowanceAfterTransfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_transfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_transferFrom(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_transferFromMoreThanBalance(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_transferFromToZeroAddress(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_transferFromZeroAmount(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_transferMoreThanBalance(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_transferToZeroAddress(
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_transferZeroAmount(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_userBalanceNotHigherThanSupply(
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_userBalancesLessThanTotalSupply(
      overrides?: CallOverrides
    ): Promise<void>;

    test_ERC20external_zeroAddressBalance(
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssertEqFail(string)"(arg0?: null): AssertEqFailEventFilter;
    AssertEqFail(arg0?: null): AssertEqFailEventFilter;

    "AssertFail(string)"(arg0?: null): AssertFailEventFilter;
    AssertFail(arg0?: null): AssertFailEventFilter;

    "AssertGtFail(string)"(arg0?: null): AssertGtFailEventFilter;
    AssertGtFail(arg0?: null): AssertGtFailEventFilter;

    "AssertGteFail(string)"(arg0?: null): AssertGteFailEventFilter;
    AssertGteFail(arg0?: null): AssertGteFailEventFilter;

    "AssertLtFail(string)"(arg0?: null): AssertLtFailEventFilter;
    AssertLtFail(arg0?: null): AssertLtFailEventFilter;

    "AssertLteFail(string)"(arg0?: null): AssertLteFailEventFilter;
    AssertLteFail(arg0?: null): AssertLteFailEventFilter;

    "AssertNeqFail(string)"(arg0?: null): AssertNeqFailEventFilter;
    AssertNeqFail(arg0?: null): AssertNeqFailEventFilter;

    "LogAddress(string,address)"(
      arg0?: null,
      arg1?: null
    ): LogAddressEventFilter;
    LogAddress(arg0?: null, arg1?: null): LogAddressEventFilter;

    "LogString(string)"(arg0?: null): LogStringEventFilter;
    LogString(arg0?: null): LogStringEventFilter;

    "LogUint256(string,uint256)"(
      arg0?: null,
      arg1?: null
    ): LogUint256EventFilter;
    LogUint256(arg0?: null, arg1?: null): LogUint256EventFilter;
  };

  estimateGas: {
    test_ERC20external_constantSupply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_selfTransfer(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_selfTransferFrom(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_setAllowance(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_setAllowanceTwice(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_spendAllowanceAfterTransfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_transfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_transferFrom(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_transferFromMoreThanBalance(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_transferFromToZeroAddress(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_transferFromZeroAmount(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_transferMoreThanBalance(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_transferToZeroAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_transferZeroAmount(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_userBalanceNotHigherThanSupply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_userBalancesLessThanTotalSupply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_ERC20external_zeroAddressBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    test_ERC20external_constantSupply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_selfTransfer(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_selfTransferFrom(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_setAllowance(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_setAllowanceTwice(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_spendAllowanceAfterTransfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_transfer(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_transferFrom(
      target: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_transferFromMoreThanBalance(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_transferFromToZeroAddress(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_transferFromZeroAmount(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_transferMoreThanBalance(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_transferToZeroAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_transferZeroAmount(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_userBalanceNotHigherThanSupply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_userBalancesLessThanTotalSupply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_ERC20external_zeroAddressBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
