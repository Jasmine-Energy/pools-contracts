/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface PropertiesAssertsInterface extends utils.Interface {
  functions: {};

  events: {
    "AssertEqFail(string)": EventFragment;
    "AssertFail(string)": EventFragment;
    "AssertGtFail(string)": EventFragment;
    "AssertGteFail(string)": EventFragment;
    "AssertLtFail(string)": EventFragment;
    "AssertLteFail(string)": EventFragment;
    "AssertNeqFail(string)": EventFragment;
    "LogAddress(string,address)": EventFragment;
    "LogString(string)": EventFragment;
    "LogUint256(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssertEqFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertGtFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertGteFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertLtFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertLteFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertNeqFail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogString"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUint256"): EventFragment;
}

export interface AssertEqFailEventObject {
  arg0: string;
}
export type AssertEqFailEvent = TypedEvent<[string], AssertEqFailEventObject>;

export type AssertEqFailEventFilter = TypedEventFilter<AssertEqFailEvent>;

export interface AssertFailEventObject {
  arg0: string;
}
export type AssertFailEvent = TypedEvent<[string], AssertFailEventObject>;

export type AssertFailEventFilter = TypedEventFilter<AssertFailEvent>;

export interface AssertGtFailEventObject {
  arg0: string;
}
export type AssertGtFailEvent = TypedEvent<[string], AssertGtFailEventObject>;

export type AssertGtFailEventFilter = TypedEventFilter<AssertGtFailEvent>;

export interface AssertGteFailEventObject {
  arg0: string;
}
export type AssertGteFailEvent = TypedEvent<[string], AssertGteFailEventObject>;

export type AssertGteFailEventFilter = TypedEventFilter<AssertGteFailEvent>;

export interface AssertLtFailEventObject {
  arg0: string;
}
export type AssertLtFailEvent = TypedEvent<[string], AssertLtFailEventObject>;

export type AssertLtFailEventFilter = TypedEventFilter<AssertLtFailEvent>;

export interface AssertLteFailEventObject {
  arg0: string;
}
export type AssertLteFailEvent = TypedEvent<[string], AssertLteFailEventObject>;

export type AssertLteFailEventFilter = TypedEventFilter<AssertLteFailEvent>;

export interface AssertNeqFailEventObject {
  arg0: string;
}
export type AssertNeqFailEvent = TypedEvent<[string], AssertNeqFailEventObject>;

export type AssertNeqFailEventFilter = TypedEventFilter<AssertNeqFailEvent>;

export interface LogAddressEventObject {
  arg0: string;
  arg1: string;
}
export type LogAddressEvent = TypedEvent<
  [string, string],
  LogAddressEventObject
>;

export type LogAddressEventFilter = TypedEventFilter<LogAddressEvent>;

export interface LogStringEventObject {
  arg0: string;
}
export type LogStringEvent = TypedEvent<[string], LogStringEventObject>;

export type LogStringEventFilter = TypedEventFilter<LogStringEvent>;

export interface LogUint256EventObject {
  arg0: string;
  arg1: BigNumber;
}
export type LogUint256Event = TypedEvent<
  [string, BigNumber],
  LogUint256EventObject
>;

export type LogUint256EventFilter = TypedEventFilter<LogUint256Event>;

export interface PropertiesAsserts extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PropertiesAssertsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AssertEqFail(string)"(arg0?: null): AssertEqFailEventFilter;
    AssertEqFail(arg0?: null): AssertEqFailEventFilter;

    "AssertFail(string)"(arg0?: null): AssertFailEventFilter;
    AssertFail(arg0?: null): AssertFailEventFilter;

    "AssertGtFail(string)"(arg0?: null): AssertGtFailEventFilter;
    AssertGtFail(arg0?: null): AssertGtFailEventFilter;

    "AssertGteFail(string)"(arg0?: null): AssertGteFailEventFilter;
    AssertGteFail(arg0?: null): AssertGteFailEventFilter;

    "AssertLtFail(string)"(arg0?: null): AssertLtFailEventFilter;
    AssertLtFail(arg0?: null): AssertLtFailEventFilter;

    "AssertLteFail(string)"(arg0?: null): AssertLteFailEventFilter;
    AssertLteFail(arg0?: null): AssertLteFailEventFilter;

    "AssertNeqFail(string)"(arg0?: null): AssertNeqFailEventFilter;
    AssertNeqFail(arg0?: null): AssertNeqFailEventFilter;

    "LogAddress(string,address)"(
      arg0?: null,
      arg1?: null
    ): LogAddressEventFilter;
    LogAddress(arg0?: null, arg1?: null): LogAddressEventFilter;

    "LogString(string)"(arg0?: null): LogStringEventFilter;
    LogString(arg0?: null): LogStringEventFilter;

    "LogUint256(string,uint256)"(
      arg0?: null,
      arg1?: null
    ): LogUint256EventFilter;
    LogUint256(arg0?: null, arg1?: null): LogUint256EventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
