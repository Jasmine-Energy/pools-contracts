/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace PoolPolicy {
  export type DepositPolicyStruct = {
    vintagePeriod: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    techType: PromiseOrValue<BigNumberish>;
    registry: PromiseOrValue<BigNumberish>;
    certificateType: PromiseOrValue<BigNumberish>;
    endorsement: PromiseOrValue<BigNumberish>;
  };

  export type DepositPolicyStructOutput = [
    [BigNumber, BigNumber],
    number,
    number,
    number,
    number
  ] & {
    vintagePeriod: [BigNumber, BigNumber];
    techType: number;
    registry: number;
    certificateType: number;
    endorsement: number;
  };
}

export interface InternalJasminePoolFactoryTestInterface
  extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FEE_MANAGER_ROLE()": FunctionFragment;
    "POOL_MANAGER_ROLE()": FunctionFragment;
    "UNISWAP_FEE_TIER()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "addPoolImplementation(address)": FunctionFragment;
    "baseRetirementRate()": FunctionFragment;
    "baseWithdrawalRate()": FunctionFragment;
    "baseWithdrawalSpecificRate()": FunctionFragment;
    "computePoolAddress(bytes32)": FunctionFragment;
    "deployNewBasePool((uint56[2],uint32,uint32,uint32,uint32),string,string,uint160)": FunctionFragment;
    "deployNewPool(uint256,bytes4,bytes,string,string,uint160)": FunctionFragment;
    "eligiblePoolsForToken(uint256)": FunctionFragment;
    "feeBeneficiary()": FunctionFragment;
    "getPoolAtIndex(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasFeeManagerRole(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,address,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "poolsBaseURI()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "readdPoolImplementation(uint256)": FunctionFragment;
    "removePoolImplementation(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBaseRetirementRate(uint96)": FunctionFragment;
    "setBaseWithdrawalRate(uint96)": FunctionFragment;
    "setBaseWithdrawalSpecificRate(uint96)": FunctionFragment;
    "setFeeBeneficiary(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalPools()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapFactory()": FunctionFragment;
    "updateImplementationAddress(address,uint256)": FunctionFragment;
    "updatePoolsBaseURI(string)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "usdc()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "FEE_MANAGER_ROLE"
      | "POOL_MANAGER_ROLE"
      | "UNISWAP_FEE_TIER"
      | "acceptOwnership"
      | "addPoolImplementation"
      | "baseRetirementRate"
      | "baseWithdrawalRate"
      | "baseWithdrawalSpecificRate"
      | "computePoolAddress"
      | "deployNewBasePool"
      | "deployNewPool"
      | "eligiblePoolsForToken"
      | "feeBeneficiary"
      | "getPoolAtIndex"
      | "getRoleAdmin"
      | "grantRole"
      | "hasFeeManagerRole"
      | "hasRole"
      | "initialize"
      | "owner"
      | "pendingOwner"
      | "poolsBaseURI"
      | "proxiableUUID"
      | "readdPoolImplementation"
      | "removePoolImplementation"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setBaseRetirementRate"
      | "setBaseWithdrawalRate"
      | "setBaseWithdrawalSpecificRate"
      | "setFeeBeneficiary"
      | "supportsInterface"
      | "totalPools"
      | "transferOwnership"
      | "uniswapFactory"
      | "updateImplementationAddress"
      | "updatePoolsBaseURI"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "usdc"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_FEE_TIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseRetirementRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseWithdrawalRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseWithdrawalSpecificRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computePoolAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNewBasePool",
    values: [
      PoolPolicy.DepositPolicyStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNewPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eligiblePoolsForToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasFeeManagerRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolsBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readdPoolImplementation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removePoolImplementation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseRetirementRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseWithdrawalRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseWithdrawalSpecificRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBeneficiary",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateImplementationAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolsBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_FEE_TIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseRetirementRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWithdrawalRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWithdrawalSpecificRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computePoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNewBasePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNewPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligiblePoolsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasFeeManagerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolsBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readdPoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseRetirementRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseWithdrawalRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseWithdrawalSpecificRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateImplementationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolsBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BaseRetirementFeeUpdate(uint96,address)": EventFragment;
    "BaseWithdrawalFeeUpdate(uint96,address,bool)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolCreated(bytes,address,string,string)": EventFragment;
    "PoolImplementationAdded(address,address,uint256)": EventFragment;
    "PoolImplementationRemoved(address,uint256)": EventFragment;
    "PoolImplementationUpgraded(address,address,uint256)": EventFragment;
    "PoolsBaseURIChanged(string,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseRetirementFeeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseWithdrawalFeeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolImplementationAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolImplementationRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolImplementationUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolsBaseURIChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BaseRetirementFeeUpdateEventObject {
  retirementRateBips: BigNumber;
  beneficiary: string;
}
export type BaseRetirementFeeUpdateEvent = TypedEvent<
  [BigNumber, string],
  BaseRetirementFeeUpdateEventObject
>;

export type BaseRetirementFeeUpdateEventFilter =
  TypedEventFilter<BaseRetirementFeeUpdateEvent>;

export interface BaseWithdrawalFeeUpdateEventObject {
  withdrawRateBips: BigNumber;
  beneficiary: string;
  specific: boolean;
}
export type BaseWithdrawalFeeUpdateEvent = TypedEvent<
  [BigNumber, string, boolean],
  BaseWithdrawalFeeUpdateEventObject
>;

export type BaseWithdrawalFeeUpdateEventFilter =
  TypedEventFilter<BaseWithdrawalFeeUpdateEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolCreatedEventObject {
  policy: string;
  pool: string;
  name: string;
  symbol: string;
}
export type PoolCreatedEvent = TypedEvent<
  [string, string, string, string],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface PoolImplementationAddedEventObject {
  poolImplementation: string;
  beaconAddress: string;
  poolIndex: BigNumber;
}
export type PoolImplementationAddedEvent = TypedEvent<
  [string, string, BigNumber],
  PoolImplementationAddedEventObject
>;

export type PoolImplementationAddedEventFilter =
  TypedEventFilter<PoolImplementationAddedEvent>;

export interface PoolImplementationRemovedEventObject {
  beaconAddress: string;
  poolIndex: BigNumber;
}
export type PoolImplementationRemovedEvent = TypedEvent<
  [string, BigNumber],
  PoolImplementationRemovedEventObject
>;

export type PoolImplementationRemovedEventFilter =
  TypedEventFilter<PoolImplementationRemovedEvent>;

export interface PoolImplementationUpgradedEventObject {
  newPoolImplementation: string;
  beaconAddress: string;
  poolIndex: BigNumber;
}
export type PoolImplementationUpgradedEvent = TypedEvent<
  [string, string, BigNumber],
  PoolImplementationUpgradedEventObject
>;

export type PoolImplementationUpgradedEventFilter =
  TypedEventFilter<PoolImplementationUpgradedEvent>;

export interface PoolsBaseURIChangedEventObject {
  newBaseURI: string;
  oldBaseURI: string;
}
export type PoolsBaseURIChangedEvent = TypedEvent<
  [string, string],
  PoolsBaseURIChangedEventObject
>;

export type PoolsBaseURIChangedEventFilter =
  TypedEventFilter<PoolsBaseURIChangedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface InternalJasminePoolFactoryTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InternalJasminePoolFactoryTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FEE_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    POOL_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UNISWAP_FEE_TIER(overrides?: CallOverrides): Promise<[number]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPoolImplementation(
      newPoolImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    baseRetirementRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseWithdrawalRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseWithdrawalSpecificRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    computePoolAddress(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { poolAddress: string }>;

    deployNewBasePool(
      policy: PoolPolicy.DepositPolicyStruct,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      initialSqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployNewPool(
      version: PromiseOrValue<BigNumberish>,
      initSelector: PromiseOrValue<BytesLike>,
      initData: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      initialSqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eligiblePoolsForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    feeBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    getPoolAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { pool: string }>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasFeeManagerRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isFeeManager: boolean }>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _poolImplementation: PromiseOrValue<string>,
      _poolManager: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      _feeBeneficiary: PromiseOrValue<string>,
      _tokensBaseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    poolsBaseURI(
      overrides?: CallOverrides
    ): Promise<[string] & { baseURI: string }>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    readdPoolImplementation(
      implementationsIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePoolImplementation(
      implementationsIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: CallOverrides): Promise<[void]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseRetirementRate(
      newRetirementRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseWithdrawalRate(
      newWithdrawalRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseWithdrawalSpecificRate(
      newWithdrawalRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeBeneficiary(
      newFeeBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalPools(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numberOfPools: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapFactory(overrides?: CallOverrides): Promise<[string]>;

    updateImplementationAddress(
      newPoolImplementation: PromiseOrValue<string>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePoolsBaseURI(
      newPoolsURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FEE_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  POOL_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  UNISWAP_FEE_TIER(overrides?: CallOverrides): Promise<number>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPoolImplementation(
    newPoolImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  baseRetirementRate(overrides?: CallOverrides): Promise<BigNumber>;

  baseWithdrawalRate(overrides?: CallOverrides): Promise<BigNumber>;

  baseWithdrawalSpecificRate(overrides?: CallOverrides): Promise<BigNumber>;

  computePoolAddress(
    policyHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  deployNewBasePool(
    policy: PoolPolicy.DepositPolicyStruct,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    initialSqrtPriceX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployNewPool(
    version: PromiseOrValue<BigNumberish>,
    initSelector: PromiseOrValue<BytesLike>,
    initData: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    initialSqrtPriceX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eligiblePoolsForToken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  feeBeneficiary(overrides?: CallOverrides): Promise<string>;

  getPoolAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasFeeManagerRole(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _owner: PromiseOrValue<string>,
    _poolImplementation: PromiseOrValue<string>,
    _poolManager: PromiseOrValue<string>,
    _feeManager: PromiseOrValue<string>,
    _feeBeneficiary: PromiseOrValue<string>,
    _tokensBaseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  poolsBaseURI(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  readdPoolImplementation(
    implementationsIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePoolImplementation(
    implementationsIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseRetirementRate(
    newRetirementRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseWithdrawalRate(
    newWithdrawalRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseWithdrawalSpecificRate(
    newWithdrawalRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeBeneficiary(
    newFeeBeneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalPools(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapFactory(overrides?: CallOverrides): Promise<string>;

  updateImplementationAddress(
    newPoolImplementation: PromiseOrValue<string>,
    poolIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePoolsBaseURI(
    newPoolsURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FEE_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    POOL_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    UNISWAP_FEE_TIER(overrides?: CallOverrides): Promise<number>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addPoolImplementation(
      newPoolImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseRetirementRate(overrides?: CallOverrides): Promise<BigNumber>;

    baseWithdrawalRate(overrides?: CallOverrides): Promise<BigNumber>;

    baseWithdrawalSpecificRate(overrides?: CallOverrides): Promise<BigNumber>;

    computePoolAddress(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployNewBasePool(
      policy: PoolPolicy.DepositPolicyStruct,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      initialSqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployNewPool(
      version: PromiseOrValue<BigNumberish>,
      initSelector: PromiseOrValue<BytesLike>,
      initData: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      initialSqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    eligiblePoolsForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    feeBeneficiary(overrides?: CallOverrides): Promise<string>;

    getPoolAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasFeeManagerRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _owner: PromiseOrValue<string>,
      _poolImplementation: PromiseOrValue<string>,
      _poolManager: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      _feeBeneficiary: PromiseOrValue<string>,
      _tokensBaseURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    poolsBaseURI(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    readdPoolImplementation(
      implementationsIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removePoolImplementation(
      implementationsIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseRetirementRate(
      newRetirementRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseWithdrawalRate(
      newWithdrawalRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseWithdrawalSpecificRate(
      newWithdrawalRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeBeneficiary(
      newFeeBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalPools(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapFactory(overrides?: CallOverrides): Promise<string>;

    updateImplementationAddress(
      newPoolImplementation: PromiseOrValue<string>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolsBaseURI(
      newPoolsURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BaseRetirementFeeUpdate(uint96,address)"(
      retirementRateBips?: null,
      beneficiary?: PromiseOrValue<string> | null
    ): BaseRetirementFeeUpdateEventFilter;
    BaseRetirementFeeUpdate(
      retirementRateBips?: null,
      beneficiary?: PromiseOrValue<string> | null
    ): BaseRetirementFeeUpdateEventFilter;

    "BaseWithdrawalFeeUpdate(uint96,address,bool)"(
      withdrawRateBips?: null,
      beneficiary?: PromiseOrValue<string> | null,
      specific?: PromiseOrValue<boolean> | null
    ): BaseWithdrawalFeeUpdateEventFilter;
    BaseWithdrawalFeeUpdate(
      withdrawRateBips?: null,
      beneficiary?: PromiseOrValue<string> | null,
      specific?: PromiseOrValue<boolean> | null
    ): BaseWithdrawalFeeUpdateEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolCreated(bytes,address,string,string)"(
      policy?: null,
      pool?: PromiseOrValue<string> | null,
      name?: PromiseOrValue<string> | null,
      symbol?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;
    PoolCreated(
      policy?: null,
      pool?: PromiseOrValue<string> | null,
      name?: PromiseOrValue<string> | null,
      symbol?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;

    "PoolImplementationAdded(address,address,uint256)"(
      poolImplementation?: PromiseOrValue<string> | null,
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationAddedEventFilter;
    PoolImplementationAdded(
      poolImplementation?: PromiseOrValue<string> | null,
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationAddedEventFilter;

    "PoolImplementationRemoved(address,uint256)"(
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationRemovedEventFilter;
    PoolImplementationRemoved(
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationRemovedEventFilter;

    "PoolImplementationUpgraded(address,address,uint256)"(
      newPoolImplementation?: PromiseOrValue<string> | null,
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationUpgradedEventFilter;
    PoolImplementationUpgraded(
      newPoolImplementation?: PromiseOrValue<string> | null,
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationUpgradedEventFilter;

    "PoolsBaseURIChanged(string,string)"(
      newBaseURI?: PromiseOrValue<string> | null,
      oldBaseURI?: PromiseOrValue<string> | null
    ): PoolsBaseURIChangedEventFilter;
    PoolsBaseURIChanged(
      newBaseURI?: PromiseOrValue<string> | null,
      oldBaseURI?: PromiseOrValue<string> | null
    ): PoolsBaseURIChangedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UNISWAP_FEE_TIER(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPoolImplementation(
      newPoolImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    baseRetirementRate(overrides?: CallOverrides): Promise<BigNumber>;

    baseWithdrawalRate(overrides?: CallOverrides): Promise<BigNumber>;

    baseWithdrawalSpecificRate(overrides?: CallOverrides): Promise<BigNumber>;

    computePoolAddress(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployNewBasePool(
      policy: PoolPolicy.DepositPolicyStruct,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      initialSqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployNewPool(
      version: PromiseOrValue<BigNumberish>,
      initSelector: PromiseOrValue<BytesLike>,
      initData: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      initialSqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eligiblePoolsForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasFeeManagerRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _poolImplementation: PromiseOrValue<string>,
      _poolManager: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      _feeBeneficiary: PromiseOrValue<string>,
      _tokensBaseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    poolsBaseURI(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    readdPoolImplementation(
      implementationsIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePoolImplementation(
      implementationsIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseRetirementRate(
      newRetirementRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseWithdrawalRate(
      newWithdrawalRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseWithdrawalSpecificRate(
      newWithdrawalRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeBeneficiary(
      newFeeBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPools(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    updateImplementationAddress(
      newPoolImplementation: PromiseOrValue<string>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePoolsBaseURI(
      newPoolsURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL_MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNISWAP_FEE_TIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPoolImplementation(
      newPoolImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    baseRetirementRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseWithdrawalRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseWithdrawalSpecificRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computePoolAddress(
      policyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployNewBasePool(
      policy: PoolPolicy.DepositPolicyStruct,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      initialSqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployNewPool(
      version: PromiseOrValue<BigNumberish>,
      initSelector: PromiseOrValue<BytesLike>,
      initData: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      initialSqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eligiblePoolsForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeBeneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasFeeManagerRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _poolImplementation: PromiseOrValue<string>,
      _poolManager: PromiseOrValue<string>,
      _feeManager: PromiseOrValue<string>,
      _feeBeneficiary: PromiseOrValue<string>,
      _tokensBaseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolsBaseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readdPoolImplementation(
      implementationsIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePoolImplementation(
      implementationsIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseRetirementRate(
      newRetirementRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseWithdrawalRate(
      newWithdrawalRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseWithdrawalSpecificRate(
      newWithdrawalRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBeneficiary(
      newFeeBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateImplementationAddress(
      newPoolImplementation: PromiseOrValue<string>,
      poolIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolsBaseURI(
      newPoolsURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
