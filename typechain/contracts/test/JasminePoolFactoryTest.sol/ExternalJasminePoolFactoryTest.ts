/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ExternalJasminePoolFactoryTestInterface
  extends utils.Interface {
  functions: {
    "bridge()": FunctionFragment;
    "eat()": FunctionFragment;
    "feeBeneficiary()": FunctionFragment;
    "feeManager()": FunctionFragment;
    "frontHalfPool()": FunctionFragment;
    "mintEAT(address,uint256,uint40,uint32)": FunctionFragment;
    "minter()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolFactory()": FunctionFragment;
    "poolImplementation()": FunctionFragment;
    "poolManager()": FunctionFragment;
    "retirementService()": FunctionFragment;
    "test_owner()": FunctionFragment;
    "test_setup()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridge"
      | "eat"
      | "feeBeneficiary"
      | "feeManager"
      | "frontHalfPool"
      | "mintEAT"
      | "minter"
      | "oracle"
      | "owner"
      | "poolFactory"
      | "poolImplementation"
      | "poolManager"
      | "retirementService"
      | "test_owner"
      | "test_setup"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(functionFragment: "eat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "frontHalfPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintEAT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retirementService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_owner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_setup",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "frontHalfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintEAT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retirementService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test_owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_setup", data: BytesLike): Result;

  events: {
    "AssertionFailed(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssertionFailed"): EventFragment;
}

export interface AssertionFailedEventObject {
  reason: string;
}
export type AssertionFailedEvent = TypedEvent<
  [string],
  AssertionFailedEventObject
>;

export type AssertionFailedEventFilter = TypedEventFilter<AssertionFailedEvent>;

export interface ExternalJasminePoolFactoryTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExternalJasminePoolFactoryTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridge(overrides?: CallOverrides): Promise<[string]>;

    eat(overrides?: CallOverrides): Promise<[string]>;

    feeBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    feeManager(overrides?: CallOverrides): Promise<[string]>;

    frontHalfPool(overrides?: CallOverrides): Promise<[string]>;

    mintEAT(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      vintage: PromiseOrValue<BigNumberish>,
      techType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolFactory(overrides?: CallOverrides): Promise<[string]>;

    poolImplementation(overrides?: CallOverrides): Promise<[string]>;

    poolManager(overrides?: CallOverrides): Promise<[string]>;

    retirementService(overrides?: CallOverrides): Promise<[string]>;

    test_owner(overrides?: CallOverrides): Promise<[void]>;

    test_setup(overrides?: CallOverrides): Promise<[void]>;
  };

  bridge(overrides?: CallOverrides): Promise<string>;

  eat(overrides?: CallOverrides): Promise<string>;

  feeBeneficiary(overrides?: CallOverrides): Promise<string>;

  feeManager(overrides?: CallOverrides): Promise<string>;

  frontHalfPool(overrides?: CallOverrides): Promise<string>;

  mintEAT(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    vintage: PromiseOrValue<BigNumberish>,
    techType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minter(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolFactory(overrides?: CallOverrides): Promise<string>;

  poolImplementation(overrides?: CallOverrides): Promise<string>;

  poolManager(overrides?: CallOverrides): Promise<string>;

  retirementService(overrides?: CallOverrides): Promise<string>;

  test_owner(overrides?: CallOverrides): Promise<void>;

  test_setup(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    bridge(overrides?: CallOverrides): Promise<string>;

    eat(overrides?: CallOverrides): Promise<string>;

    feeBeneficiary(overrides?: CallOverrides): Promise<string>;

    feeManager(overrides?: CallOverrides): Promise<string>;

    frontHalfPool(overrides?: CallOverrides): Promise<string>;

    mintEAT(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      vintage: PromiseOrValue<BigNumberish>,
      techType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolFactory(overrides?: CallOverrides): Promise<string>;

    poolImplementation(overrides?: CallOverrides): Promise<string>;

    poolManager(overrides?: CallOverrides): Promise<string>;

    retirementService(overrides?: CallOverrides): Promise<string>;

    test_owner(overrides?: CallOverrides): Promise<void>;

    test_setup(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AssertionFailed(string)"(reason?: null): AssertionFailedEventFilter;
    AssertionFailed(reason?: null): AssertionFailedEventFilter;
  };

  estimateGas: {
    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    eat(overrides?: CallOverrides): Promise<BigNumber>;

    feeBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    feeManager(overrides?: CallOverrides): Promise<BigNumber>;

    frontHalfPool(overrides?: CallOverrides): Promise<BigNumber>;

    mintEAT(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      vintage: PromiseOrValue<BigNumberish>,
      techType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    poolImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    poolManager(overrides?: CallOverrides): Promise<BigNumber>;

    retirementService(overrides?: CallOverrides): Promise<BigNumber>;

    test_owner(overrides?: CallOverrides): Promise<BigNumber>;

    test_setup(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBeneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frontHalfPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintEAT(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      vintage: PromiseOrValue<BigNumberish>,
      techType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retirementService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test_owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test_setup(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
