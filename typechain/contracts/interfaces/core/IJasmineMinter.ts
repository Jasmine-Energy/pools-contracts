/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IJasmineMinterInterface extends Interface {
  getFunction(
    nameOrSignature: "burn" | "burnBatch" | "mint" | "mintBatch"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BurnedBatch" | "BurnedSingle"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike,
      BytesLike[],
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
}

export namespace BurnedBatchEvent {
  export type InputTuple = [
    owner: AddressLike,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    metadata: BytesLike
  ];
  export type OutputTuple = [
    owner: string,
    ids: bigint[],
    amounts: bigint[],
    metadata: string
  ];
  export interface OutputObject {
    owner: string;
    ids: bigint[];
    amounts: bigint[];
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnedSingleEvent {
  export type InputTuple = [
    owner: AddressLike,
    id: BigNumberish,
    amount: BigNumberish,
    metadata: BytesLike
  ];
  export type OutputTuple = [
    owner: string,
    id: bigint,
    amount: bigint,
    metadata: string
  ];
  export interface OutputObject {
    owner: string;
    id: bigint;
    amount: bigint;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IJasmineMinter extends BaseContract {
  connect(runner?: ContractRunner | null): IJasmineMinter;
  waitForDeployment(): Promise<this>;

  interface: IJasmineMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  burn: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, metadata: BytesLike],
    [void],
    "nonpayable"
  >;

  burnBatch: TypedContractMethod<
    [ids: BigNumberish[], amounts: BigNumberish[], metadata: BytesLike],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [
      receiver: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      transferData: BytesLike,
      oracleData: BytesLike,
      deadline: BigNumberish,
      nonce: BytesLike,
      sig: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  mintBatch: TypedContractMethod<
    [
      receiver: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      transferData: BytesLike,
      oracleDatas: BytesLike[],
      deadline: BigNumberish,
      nonce: BytesLike,
      sig: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish, metadata: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnBatch"
  ): TypedContractMethod<
    [ids: BigNumberish[], amounts: BigNumberish[], metadata: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      transferData: BytesLike,
      oracleData: BytesLike,
      deadline: BigNumberish,
      nonce: BytesLike,
      sig: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintBatch"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      transferData: BytesLike,
      oracleDatas: BytesLike[],
      deadline: BigNumberish,
      nonce: BytesLike,
      sig: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BurnedBatch"
  ): TypedContractEvent<
    BurnedBatchEvent.InputTuple,
    BurnedBatchEvent.OutputTuple,
    BurnedBatchEvent.OutputObject
  >;
  getEvent(
    key: "BurnedSingle"
  ): TypedContractEvent<
    BurnedSingleEvent.InputTuple,
    BurnedSingleEvent.OutputTuple,
    BurnedSingleEvent.OutputObject
  >;

  filters: {
    "BurnedBatch(address,uint256[],uint256[],bytes)": TypedContractEvent<
      BurnedBatchEvent.InputTuple,
      BurnedBatchEvent.OutputTuple,
      BurnedBatchEvent.OutputObject
    >;
    BurnedBatch: TypedContractEvent<
      BurnedBatchEvent.InputTuple,
      BurnedBatchEvent.OutputTuple,
      BurnedBatchEvent.OutputObject
    >;

    "BurnedSingle(address,uint256,uint256,bytes)": TypedContractEvent<
      BurnedSingleEvent.InputTuple,
      BurnedSingleEvent.OutputTuple,
      BurnedSingleEvent.OutputObject
    >;
    BurnedSingle: TypedContractEvent<
      BurnedSingleEvent.InputTuple,
      BurnedSingleEvent.OutputTuple,
      BurnedSingleEvent.OutputObject
    >;
  };
}
