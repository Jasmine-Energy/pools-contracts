/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IJasmineOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getUUID"
      | "hasCertificateType"
      | "hasEndorsement"
      | "hasFuel"
      | "hasRegistry"
      | "hasVintage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getUUID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCertificateType",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasEndorsement",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasFuel",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRegistry",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVintage",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getUUID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasCertificateType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasEndorsement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasFuel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVintage", data: BytesLike): Result;
}

export interface IJasmineOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IJasmineOracle;
  waitForDeployment(): Promise<this>;

  interface: IJasmineOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getUUID: TypedContractMethod<[id: BigNumberish], [bigint], "view">;

  hasCertificateType: TypedContractMethod<
    [id: BigNumberish, query: BigNumberish],
    [boolean],
    "view"
  >;

  hasEndorsement: TypedContractMethod<
    [id: BigNumberish, query: BigNumberish],
    [boolean],
    "view"
  >;

  hasFuel: TypedContractMethod<
    [id: BigNumberish, query: BigNumberish],
    [boolean],
    "view"
  >;

  hasRegistry: TypedContractMethod<
    [id: BigNumberish, query: BigNumberish],
    [boolean],
    "view"
  >;

  hasVintage: TypedContractMethod<
    [id: BigNumberish, min: BigNumberish, max: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getUUID"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasCertificateType"
  ): TypedContractMethod<
    [id: BigNumberish, query: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasEndorsement"
  ): TypedContractMethod<
    [id: BigNumberish, query: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasFuel"
  ): TypedContractMethod<
    [id: BigNumberish, query: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRegistry"
  ): TypedContractMethod<
    [id: BigNumberish, query: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVintage"
  ): TypedContractMethod<
    [id: BigNumberish, min: BigNumberish, max: BigNumberish],
    [boolean],
    "view"
  >;

  filters: {};
}
