/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IJasmineFeeManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_MANAGER_ROLE"
      | "baseRetirementRate"
      | "baseWithdrawalRate"
      | "baseWithdrawalSpecificRate"
      | "feeBeneficiary"
      | "hasFeeManagerRole"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BaseRetirementFeeUpdate"
      | "BaseWithdrawalFeeUpdate"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseRetirementRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseWithdrawalRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseWithdrawalSpecificRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasFeeManagerRole",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseRetirementRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWithdrawalRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWithdrawalSpecificRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasFeeManagerRole",
    data: BytesLike
  ): Result;
}

export namespace BaseRetirementFeeUpdateEvent {
  export type InputTuple = [
    retirementRateBips: BigNumberish,
    beneficiary: AddressLike
  ];
  export type OutputTuple = [retirementRateBips: bigint, beneficiary: string];
  export interface OutputObject {
    retirementRateBips: bigint;
    beneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseWithdrawalFeeUpdateEvent {
  export type InputTuple = [
    withdrawRateBips: BigNumberish,
    beneficiary: AddressLike,
    specific: boolean
  ];
  export type OutputTuple = [
    withdrawRateBips: bigint,
    beneficiary: string,
    specific: boolean
  ];
  export interface OutputObject {
    withdrawRateBips: bigint;
    beneficiary: string;
    specific: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IJasmineFeeManager extends BaseContract {
  connect(runner?: ContractRunner | null): IJasmineFeeManager;
  waitForDeployment(): Promise<this>;

  interface: IJasmineFeeManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  baseRetirementRate: TypedContractMethod<[], [bigint], "view">;

  baseWithdrawalRate: TypedContractMethod<[], [bigint], "view">;

  baseWithdrawalSpecificRate: TypedContractMethod<[], [bigint], "view">;

  feeBeneficiary: TypedContractMethod<[], [string], "view">;

  hasFeeManagerRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseRetirementRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseWithdrawalRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseWithdrawalSpecificRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeBeneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasFeeManagerRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;

  getEvent(
    key: "BaseRetirementFeeUpdate"
  ): TypedContractEvent<
    BaseRetirementFeeUpdateEvent.InputTuple,
    BaseRetirementFeeUpdateEvent.OutputTuple,
    BaseRetirementFeeUpdateEvent.OutputObject
  >;
  getEvent(
    key: "BaseWithdrawalFeeUpdate"
  ): TypedContractEvent<
    BaseWithdrawalFeeUpdateEvent.InputTuple,
    BaseWithdrawalFeeUpdateEvent.OutputTuple,
    BaseWithdrawalFeeUpdateEvent.OutputObject
  >;

  filters: {
    "BaseRetirementFeeUpdate(uint96,address)": TypedContractEvent<
      BaseRetirementFeeUpdateEvent.InputTuple,
      BaseRetirementFeeUpdateEvent.OutputTuple,
      BaseRetirementFeeUpdateEvent.OutputObject
    >;
    BaseRetirementFeeUpdate: TypedContractEvent<
      BaseRetirementFeeUpdateEvent.InputTuple,
      BaseRetirementFeeUpdateEvent.OutputTuple,
      BaseRetirementFeeUpdateEvent.OutputObject
    >;

    "BaseWithdrawalFeeUpdate(uint96,address,bool)": TypedContractEvent<
      BaseWithdrawalFeeUpdateEvent.InputTuple,
      BaseWithdrawalFeeUpdateEvent.OutputTuple,
      BaseWithdrawalFeeUpdateEvent.OutputObject
    >;
    BaseWithdrawalFeeUpdate: TypedContractEvent<
      BaseWithdrawalFeeUpdateEvent.InputTuple,
      BaseWithdrawalFeeUpdateEvent.OutputTuple,
      BaseWithdrawalFeeUpdateEvent.OutputObject
    >;
  };
}
