/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IJasmineFeeManagerInterface extends utils.Interface {
  functions: {
    "FEE_MANAGER_ROLE()": FunctionFragment;
    "baseRetirementRate()": FunctionFragment;
    "baseWithdrawalRate()": FunctionFragment;
    "baseWithdrawalSpecificRate()": FunctionFragment;
    "feeBeneficiary()": FunctionFragment;
    "hasFeeManagerRole(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE_MANAGER_ROLE"
      | "baseRetirementRate"
      | "baseWithdrawalRate"
      | "baseWithdrawalSpecificRate"
      | "feeBeneficiary"
      | "hasFeeManagerRole"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseRetirementRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseWithdrawalRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseWithdrawalSpecificRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasFeeManagerRole",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseRetirementRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWithdrawalRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWithdrawalSpecificRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasFeeManagerRole",
    data: BytesLike
  ): Result;

  events: {
    "BaseRetirementFeeUpdate(uint96,address)": EventFragment;
    "BaseWithdrawalFeeUpdate(uint96,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseRetirementFeeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseWithdrawalFeeUpdate"): EventFragment;
}

export interface BaseRetirementFeeUpdateEventObject {
  retirementRateBips: BigNumber;
  beneficiary: string;
}
export type BaseRetirementFeeUpdateEvent = TypedEvent<
  [BigNumber, string],
  BaseRetirementFeeUpdateEventObject
>;

export type BaseRetirementFeeUpdateEventFilter =
  TypedEventFilter<BaseRetirementFeeUpdateEvent>;

export interface BaseWithdrawalFeeUpdateEventObject {
  withdrawRateBips: BigNumber;
  beneficiary: string;
  specific: boolean;
}
export type BaseWithdrawalFeeUpdateEvent = TypedEvent<
  [BigNumber, string, boolean],
  BaseWithdrawalFeeUpdateEventObject
>;

export type BaseWithdrawalFeeUpdateEventFilter =
  TypedEventFilter<BaseWithdrawalFeeUpdateEvent>;

export interface IJasmineFeeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IJasmineFeeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    baseRetirementRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseWithdrawalRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseWithdrawalSpecificRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    hasFeeManagerRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isFeeManager: boolean }>;
  };

  FEE_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  baseRetirementRate(overrides?: CallOverrides): Promise<BigNumber>;

  baseWithdrawalRate(overrides?: CallOverrides): Promise<BigNumber>;

  baseWithdrawalSpecificRate(overrides?: CallOverrides): Promise<BigNumber>;

  feeBeneficiary(overrides?: CallOverrides): Promise<string>;

  hasFeeManagerRole(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    FEE_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    baseRetirementRate(overrides?: CallOverrides): Promise<BigNumber>;

    baseWithdrawalRate(overrides?: CallOverrides): Promise<BigNumber>;

    baseWithdrawalSpecificRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeBeneficiary(overrides?: CallOverrides): Promise<string>;

    hasFeeManagerRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BaseRetirementFeeUpdate(uint96,address)"(
      retirementRateBips?: null,
      beneficiary?: PromiseOrValue<string> | null
    ): BaseRetirementFeeUpdateEventFilter;
    BaseRetirementFeeUpdate(
      retirementRateBips?: null,
      beneficiary?: PromiseOrValue<string> | null
    ): BaseRetirementFeeUpdateEventFilter;

    "BaseWithdrawalFeeUpdate(uint96,address,bool)"(
      withdrawRateBips?: null,
      beneficiary?: PromiseOrValue<string> | null,
      specific?: PromiseOrValue<boolean> | null
    ): BaseWithdrawalFeeUpdateEventFilter;
    BaseWithdrawalFeeUpdate(
      withdrawRateBips?: null,
      beneficiary?: PromiseOrValue<string> | null,
      specific?: PromiseOrValue<boolean> | null
    ): BaseWithdrawalFeeUpdateEventFilter;
  };

  estimateGas: {
    FEE_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    baseRetirementRate(overrides?: CallOverrides): Promise<BigNumber>;

    baseWithdrawalRate(overrides?: CallOverrides): Promise<BigNumber>;

    baseWithdrawalSpecificRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    hasFeeManagerRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseRetirementRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseWithdrawalRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseWithdrawalSpecificRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeBeneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasFeeManagerRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
