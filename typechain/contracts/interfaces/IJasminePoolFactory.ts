/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IJasminePoolFactoryInterface extends utils.Interface {
  functions: {
    "eligiblePoolsForToken(uint256)": FunctionFragment;
    "getPoolAtIndex(uint256)": FunctionFragment;
    "totalPools()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "eligiblePoolsForToken"
      | "getPoolAtIndex"
      | "totalPools"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "eligiblePoolsForToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPools",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "eligiblePoolsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPools", data: BytesLike): Result;

  events: {
    "PoolCreated(bytes,address,string,string)": EventFragment;
    "PoolImplementationAdded(address,address,uint256)": EventFragment;
    "PoolImplementationRemoved(address,uint256)": EventFragment;
    "PoolImplementationUpgraded(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolImplementationAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolImplementationRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolImplementationUpgraded"): EventFragment;
}

export interface PoolCreatedEventObject {
  policy: string;
  pool: string;
  name: string;
  symbol: string;
}
export type PoolCreatedEvent = TypedEvent<
  [string, string, string, string],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface PoolImplementationAddedEventObject {
  poolImplementation: string;
  beaconAddress: string;
  poolIndex: BigNumber;
}
export type PoolImplementationAddedEvent = TypedEvent<
  [string, string, BigNumber],
  PoolImplementationAddedEventObject
>;

export type PoolImplementationAddedEventFilter =
  TypedEventFilter<PoolImplementationAddedEvent>;

export interface PoolImplementationRemovedEventObject {
  beaconAddress: string;
  poolIndex: BigNumber;
}
export type PoolImplementationRemovedEvent = TypedEvent<
  [string, BigNumber],
  PoolImplementationRemovedEventObject
>;

export type PoolImplementationRemovedEventFilter =
  TypedEventFilter<PoolImplementationRemovedEvent>;

export interface PoolImplementationUpgradedEventObject {
  newPoolImplementation: string;
  beaconAddress: string;
  poolIndex: BigNumber;
}
export type PoolImplementationUpgradedEvent = TypedEvent<
  [string, string, BigNumber],
  PoolImplementationUpgradedEventObject
>;

export type PoolImplementationUpgradedEventFilter =
  TypedEventFilter<PoolImplementationUpgradedEvent>;

export interface IJasminePoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IJasminePoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    eligiblePoolsForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    getPoolAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { pool: string }>;

    totalPools(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  eligiblePoolsForToken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPoolAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalPools(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    eligiblePoolsForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPoolAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalPools(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PoolCreated(bytes,address,string,string)"(
      policy?: null,
      pool?: PromiseOrValue<string> | null,
      name?: PromiseOrValue<string> | null,
      symbol?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;
    PoolCreated(
      policy?: null,
      pool?: PromiseOrValue<string> | null,
      name?: PromiseOrValue<string> | null,
      symbol?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;

    "PoolImplementationAdded(address,address,uint256)"(
      poolImplementation?: PromiseOrValue<string> | null,
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationAddedEventFilter;
    PoolImplementationAdded(
      poolImplementation?: PromiseOrValue<string> | null,
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationAddedEventFilter;

    "PoolImplementationRemoved(address,uint256)"(
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationRemovedEventFilter;
    PoolImplementationRemoved(
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationRemovedEventFilter;

    "PoolImplementationUpgraded(address,address,uint256)"(
      newPoolImplementation?: PromiseOrValue<string> | null,
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationUpgradedEventFilter;
    PoolImplementationUpgraded(
      newPoolImplementation?: PromiseOrValue<string> | null,
      beaconAddress?: PromiseOrValue<string> | null,
      poolIndex?: PromiseOrValue<BigNumberish> | null
    ): PoolImplementationUpgradedEventFilter;
  };

  estimateGas: {
    eligiblePoolsForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPools(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    eligiblePoolsForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
