/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IJasminePoolFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "eligiblePoolsForToken" | "getPoolAtIndex" | "totalPools"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PoolCreated"
      | "PoolImplementationAdded"
      | "PoolImplementationRemoved"
      | "PoolImplementationUpgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "eligiblePoolsForToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPools",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "eligiblePoolsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPools", data: BytesLike): Result;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    policy: BytesLike,
    pool: AddressLike,
    name: string,
    symbol: string
  ];
  export type OutputTuple = [
    policy: string,
    pool: string,
    name: string,
    symbol: string
  ];
  export interface OutputObject {
    policy: string;
    pool: string;
    name: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolImplementationAddedEvent {
  export type InputTuple = [
    poolImplementation: AddressLike,
    beaconAddress: AddressLike,
    poolIndex: BigNumberish
  ];
  export type OutputTuple = [
    poolImplementation: string,
    beaconAddress: string,
    poolIndex: bigint
  ];
  export interface OutputObject {
    poolImplementation: string;
    beaconAddress: string;
    poolIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolImplementationRemovedEvent {
  export type InputTuple = [
    beaconAddress: AddressLike,
    poolIndex: BigNumberish
  ];
  export type OutputTuple = [beaconAddress: string, poolIndex: bigint];
  export interface OutputObject {
    beaconAddress: string;
    poolIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolImplementationUpgradedEvent {
  export type InputTuple = [
    newPoolImplementation: AddressLike,
    beaconAddress: AddressLike,
    poolIndex: BigNumberish
  ];
  export type OutputTuple = [
    newPoolImplementation: string,
    beaconAddress: string,
    poolIndex: bigint
  ];
  export interface OutputObject {
    newPoolImplementation: string;
    beaconAddress: string;
    poolIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IJasminePoolFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IJasminePoolFactory;
  waitForDeployment(): Promise<this>;

  interface: IJasminePoolFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  eligiblePoolsForToken: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  getPoolAtIndex: TypedContractMethod<[index: BigNumberish], [string], "view">;

  totalPools: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "eligiblePoolsForToken"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPoolAtIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalPools"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PoolImplementationAdded"
  ): TypedContractEvent<
    PoolImplementationAddedEvent.InputTuple,
    PoolImplementationAddedEvent.OutputTuple,
    PoolImplementationAddedEvent.OutputObject
  >;
  getEvent(
    key: "PoolImplementationRemoved"
  ): TypedContractEvent<
    PoolImplementationRemovedEvent.InputTuple,
    PoolImplementationRemovedEvent.OutputTuple,
    PoolImplementationRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PoolImplementationUpgraded"
  ): TypedContractEvent<
    PoolImplementationUpgradedEvent.InputTuple,
    PoolImplementationUpgradedEvent.OutputTuple,
    PoolImplementationUpgradedEvent.OutputObject
  >;

  filters: {
    "PoolCreated(bytes,address,string,string)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "PoolImplementationAdded(address,address,uint256)": TypedContractEvent<
      PoolImplementationAddedEvent.InputTuple,
      PoolImplementationAddedEvent.OutputTuple,
      PoolImplementationAddedEvent.OutputObject
    >;
    PoolImplementationAdded: TypedContractEvent<
      PoolImplementationAddedEvent.InputTuple,
      PoolImplementationAddedEvent.OutputTuple,
      PoolImplementationAddedEvent.OutputObject
    >;

    "PoolImplementationRemoved(address,uint256)": TypedContractEvent<
      PoolImplementationRemovedEvent.InputTuple,
      PoolImplementationRemovedEvent.OutputTuple,
      PoolImplementationRemovedEvent.OutputObject
    >;
    PoolImplementationRemoved: TypedContractEvent<
      PoolImplementationRemovedEvent.InputTuple,
      PoolImplementationRemovedEvent.OutputTuple,
      PoolImplementationRemovedEvent.OutputObject
    >;

    "PoolImplementationUpgraded(address,address,uint256)": TypedContractEvent<
      PoolImplementationUpgradedEvent.InputTuple,
      PoolImplementationUpgradedEvent.OutputTuple,
      PoolImplementationUpgradedEvent.OutputObject
    >;
    PoolImplementationUpgraded: TypedContractEvent<
      PoolImplementationUpgradedEvent.InputTuple,
      PoolImplementationUpgradedEvent.OutputTuple,
      PoolImplementationUpgradedEvent.OutputObject
    >;
  };
}
