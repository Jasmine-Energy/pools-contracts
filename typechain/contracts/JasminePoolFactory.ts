/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PoolPolicy {
  export type DepositPolicyStruct = {
    vintagePeriod: [BigNumberish, BigNumberish];
    techType: BigNumberish;
    registry: BigNumberish;
    certificateType: BigNumberish;
    endorsement: BigNumberish;
  };

  export type DepositPolicyStructOutput = [
    vintagePeriod: [bigint, bigint],
    techType: bigint,
    registry: bigint,
    certificateType: bigint,
    endorsement: bigint
  ] & {
    vintagePeriod: [bigint, bigint];
    techType: bigint;
    registry: bigint;
    certificateType: bigint;
    endorsement: bigint;
  };
}

export interface JasminePoolFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "FEE_MANAGER_ROLE"
      | "POOL_MANAGER_ROLE"
      | "UNISWAP_FEE_TIER"
      | "acceptOwnership"
      | "addPoolImplementation"
      | "baseRetirementRate"
      | "baseWithdrawalRate"
      | "baseWithdrawalSpecificRate"
      | "computePoolAddress"
      | "deployNewBasePool"
      | "deployNewPool"
      | "eligiblePoolsForToken"
      | "feeBeneficiary"
      | "getPoolAtIndex"
      | "getRoleAdmin"
      | "grantRole"
      | "hasFeeManagerRole"
      | "hasRole"
      | "initialize"
      | "owner"
      | "pendingOwner"
      | "poolsBaseURI"
      | "proxiableUUID"
      | "readdPoolImplementation"
      | "removePoolImplementation"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setBaseRetirementRate"
      | "setBaseWithdrawalRate"
      | "setBaseWithdrawalSpecificRate"
      | "setFeeBeneficiary"
      | "supportsInterface"
      | "totalPools"
      | "transferOwnership"
      | "uniswapFactory"
      | "updateImplementationAddress"
      | "updatePoolsBaseURI"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "usdc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BaseRetirementFeeUpdate"
      | "BaseWithdrawalFeeUpdate"
      | "BeaconUpgraded"
      | "Initialized"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "PoolCreated"
      | "PoolImplementationAdded"
      | "PoolImplementationRemoved"
      | "PoolImplementationUpgraded"
      | "PoolsBaseURIChanged"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_FEE_TIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "baseRetirementRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseWithdrawalRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseWithdrawalSpecificRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computePoolAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNewBasePool",
    values: [PoolPolicy.DepositPolicyStruct, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNewPool",
    values: [BigNumberish, BytesLike, BytesLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eligiblePoolsForToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasFeeManagerRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolsBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readdPoolImplementation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePoolImplementation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseRetirementRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseWithdrawalRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseWithdrawalSpecificRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateImplementationAddress",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolsBaseURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_FEE_TIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseRetirementRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWithdrawalRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWithdrawalSpecificRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computePoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNewBasePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNewPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eligiblePoolsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasFeeManagerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolsBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readdPoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseRetirementRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseWithdrawalRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseWithdrawalSpecificRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateImplementationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolsBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseRetirementFeeUpdateEvent {
  export type InputTuple = [
    retirementRateBips: BigNumberish,
    beneficiary: AddressLike
  ];
  export type OutputTuple = [retirementRateBips: bigint, beneficiary: string];
  export interface OutputObject {
    retirementRateBips: bigint;
    beneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseWithdrawalFeeUpdateEvent {
  export type InputTuple = [
    withdrawRateBips: BigNumberish,
    beneficiary: AddressLike,
    specific: boolean
  ];
  export type OutputTuple = [
    withdrawRateBips: bigint,
    beneficiary: string,
    specific: boolean
  ];
  export interface OutputObject {
    withdrawRateBips: bigint;
    beneficiary: string;
    specific: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    policy: BytesLike,
    pool: AddressLike,
    name: string,
    symbol: string
  ];
  export type OutputTuple = [
    policy: string,
    pool: string,
    name: string,
    symbol: string
  ];
  export interface OutputObject {
    policy: string;
    pool: string;
    name: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolImplementationAddedEvent {
  export type InputTuple = [
    poolImplementation: AddressLike,
    beaconAddress: AddressLike,
    poolIndex: BigNumberish
  ];
  export type OutputTuple = [
    poolImplementation: string,
    beaconAddress: string,
    poolIndex: bigint
  ];
  export interface OutputObject {
    poolImplementation: string;
    beaconAddress: string;
    poolIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolImplementationRemovedEvent {
  export type InputTuple = [
    beaconAddress: AddressLike,
    poolIndex: BigNumberish
  ];
  export type OutputTuple = [beaconAddress: string, poolIndex: bigint];
  export interface OutputObject {
    beaconAddress: string;
    poolIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolImplementationUpgradedEvent {
  export type InputTuple = [
    newPoolImplementation: AddressLike,
    beaconAddress: AddressLike,
    poolIndex: BigNumberish
  ];
  export type OutputTuple = [
    newPoolImplementation: string,
    beaconAddress: string,
    poolIndex: bigint
  ];
  export interface OutputObject {
    newPoolImplementation: string;
    beaconAddress: string;
    poolIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolsBaseURIChangedEvent {
  export type InputTuple = [newBaseURI: string, oldBaseURI: string];
  export type OutputTuple = [newBaseURI: string, oldBaseURI: string];
  export interface OutputObject {
    newBaseURI: string;
    oldBaseURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JasminePoolFactory extends BaseContract {
  connect(runner?: ContractRunner | null): JasminePoolFactory;
  waitForDeployment(): Promise<this>;

  interface: JasminePoolFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FEE_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  POOL_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  UNISWAP_FEE_TIER: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addPoolImplementation: TypedContractMethod<
    [newPoolImplementation: AddressLike],
    [bigint],
    "nonpayable"
  >;

  baseRetirementRate: TypedContractMethod<[], [bigint], "view">;

  baseWithdrawalRate: TypedContractMethod<[], [bigint], "view">;

  baseWithdrawalSpecificRate: TypedContractMethod<[], [bigint], "view">;

  computePoolAddress: TypedContractMethod<
    [policyHash: BytesLike],
    [string],
    "view"
  >;

  deployNewBasePool: TypedContractMethod<
    [
      policy: PoolPolicy.DepositPolicyStruct,
      name: string,
      symbol: string,
      initialSqrtPriceX96: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  deployNewPool: TypedContractMethod<
    [
      version: BigNumberish,
      initSelector: BytesLike,
      initData: BytesLike,
      name: string,
      symbol: string,
      initialSqrtPriceX96: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  eligiblePoolsForToken: TypedContractMethod<
    [tokenId: BigNumberish],
    [string[]],
    "view"
  >;

  feeBeneficiary: TypedContractMethod<[], [string], "view">;

  getPoolAtIndex: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasFeeManagerRole: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _owner: AddressLike,
      _poolImplementation: AddressLike,
      _poolManager: AddressLike,
      _feeManager: AddressLike,
      _feeBeneficiary: AddressLike,
      _tokensBaseURI: string
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  poolsBaseURI: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  readdPoolImplementation: TypedContractMethod<
    [implementationsIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  removePoolImplementation: TypedContractMethod<
    [implementationsIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setBaseRetirementRate: TypedContractMethod<
    [newRetirementRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseWithdrawalRate: TypedContractMethod<
    [newWithdrawalRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseWithdrawalSpecificRate: TypedContractMethod<
    [newWithdrawalRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeBeneficiary: TypedContractMethod<
    [newFeeBeneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalPools: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapFactory: TypedContractMethod<[], [string], "view">;

  updateImplementationAddress: TypedContractMethod<
    [newPoolImplementation: AddressLike, poolIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePoolsBaseURI: TypedContractMethod<
    [newPoolsURI: string],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UNISWAP_FEE_TIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addPoolImplementation"
  ): TypedContractMethod<
    [newPoolImplementation: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "baseRetirementRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseWithdrawalRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseWithdrawalSpecificRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "computePoolAddress"
  ): TypedContractMethod<[policyHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "deployNewBasePool"
  ): TypedContractMethod<
    [
      policy: PoolPolicy.DepositPolicyStruct,
      name: string,
      symbol: string,
      initialSqrtPriceX96: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployNewPool"
  ): TypedContractMethod<
    [
      version: BigNumberish,
      initSelector: BytesLike,
      initData: BytesLike,
      name: string,
      symbol: string,
      initialSqrtPriceX96: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eligiblePoolsForToken"
  ): TypedContractMethod<[tokenId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "feeBeneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPoolAtIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasFeeManagerRole"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _poolImplementation: AddressLike,
      _poolManager: AddressLike,
      _feeManager: AddressLike,
      _feeBeneficiary: AddressLike,
      _tokensBaseURI: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolsBaseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "readdPoolImplementation"
  ): TypedContractMethod<
    [implementationsIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removePoolImplementation"
  ): TypedContractMethod<
    [implementationsIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseRetirementRate"
  ): TypedContractMethod<
    [newRetirementRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseWithdrawalRate"
  ): TypedContractMethod<
    [newWithdrawalRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseWithdrawalSpecificRate"
  ): TypedContractMethod<
    [newWithdrawalRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeBeneficiary"
  ): TypedContractMethod<
    [newFeeBeneficiary: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalPools"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateImplementationAddress"
  ): TypedContractMethod<
    [newPoolImplementation: AddressLike, poolIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePoolsBaseURI"
  ): TypedContractMethod<[newPoolsURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BaseRetirementFeeUpdate"
  ): TypedContractEvent<
    BaseRetirementFeeUpdateEvent.InputTuple,
    BaseRetirementFeeUpdateEvent.OutputTuple,
    BaseRetirementFeeUpdateEvent.OutputObject
  >;
  getEvent(
    key: "BaseWithdrawalFeeUpdate"
  ): TypedContractEvent<
    BaseWithdrawalFeeUpdateEvent.InputTuple,
    BaseWithdrawalFeeUpdateEvent.OutputTuple,
    BaseWithdrawalFeeUpdateEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PoolImplementationAdded"
  ): TypedContractEvent<
    PoolImplementationAddedEvent.InputTuple,
    PoolImplementationAddedEvent.OutputTuple,
    PoolImplementationAddedEvent.OutputObject
  >;
  getEvent(
    key: "PoolImplementationRemoved"
  ): TypedContractEvent<
    PoolImplementationRemovedEvent.InputTuple,
    PoolImplementationRemovedEvent.OutputTuple,
    PoolImplementationRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PoolImplementationUpgraded"
  ): TypedContractEvent<
    PoolImplementationUpgradedEvent.InputTuple,
    PoolImplementationUpgradedEvent.OutputTuple,
    PoolImplementationUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "PoolsBaseURIChanged"
  ): TypedContractEvent<
    PoolsBaseURIChangedEvent.InputTuple,
    PoolsBaseURIChangedEvent.OutputTuple,
    PoolsBaseURIChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BaseRetirementFeeUpdate(uint96,address)": TypedContractEvent<
      BaseRetirementFeeUpdateEvent.InputTuple,
      BaseRetirementFeeUpdateEvent.OutputTuple,
      BaseRetirementFeeUpdateEvent.OutputObject
    >;
    BaseRetirementFeeUpdate: TypedContractEvent<
      BaseRetirementFeeUpdateEvent.InputTuple,
      BaseRetirementFeeUpdateEvent.OutputTuple,
      BaseRetirementFeeUpdateEvent.OutputObject
    >;

    "BaseWithdrawalFeeUpdate(uint96,address,bool)": TypedContractEvent<
      BaseWithdrawalFeeUpdateEvent.InputTuple,
      BaseWithdrawalFeeUpdateEvent.OutputTuple,
      BaseWithdrawalFeeUpdateEvent.OutputObject
    >;
    BaseWithdrawalFeeUpdate: TypedContractEvent<
      BaseWithdrawalFeeUpdateEvent.InputTuple,
      BaseWithdrawalFeeUpdateEvent.OutputTuple,
      BaseWithdrawalFeeUpdateEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolCreated(bytes,address,string,string)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "PoolImplementationAdded(address,address,uint256)": TypedContractEvent<
      PoolImplementationAddedEvent.InputTuple,
      PoolImplementationAddedEvent.OutputTuple,
      PoolImplementationAddedEvent.OutputObject
    >;
    PoolImplementationAdded: TypedContractEvent<
      PoolImplementationAddedEvent.InputTuple,
      PoolImplementationAddedEvent.OutputTuple,
      PoolImplementationAddedEvent.OutputObject
    >;

    "PoolImplementationRemoved(address,uint256)": TypedContractEvent<
      PoolImplementationRemovedEvent.InputTuple,
      PoolImplementationRemovedEvent.OutputTuple,
      PoolImplementationRemovedEvent.OutputObject
    >;
    PoolImplementationRemoved: TypedContractEvent<
      PoolImplementationRemovedEvent.InputTuple,
      PoolImplementationRemovedEvent.OutputTuple,
      PoolImplementationRemovedEvent.OutputObject
    >;

    "PoolImplementationUpgraded(address,address,uint256)": TypedContractEvent<
      PoolImplementationUpgradedEvent.InputTuple,
      PoolImplementationUpgradedEvent.OutputTuple,
      PoolImplementationUpgradedEvent.OutputObject
    >;
    PoolImplementationUpgraded: TypedContractEvent<
      PoolImplementationUpgradedEvent.InputTuple,
      PoolImplementationUpgradedEvent.OutputTuple,
      PoolImplementationUpgradedEvent.OutputObject
    >;

    "PoolsBaseURIChanged(string,string)": TypedContractEvent<
      PoolsBaseURIChangedEvent.InputTuple,
      PoolsBaseURIChangedEvent.OutputTuple,
      PoolsBaseURIChangedEvent.OutputObject
    >;
    PoolsBaseURIChanged: TypedContractEvent<
      PoolsBaseURIChangedEvent.InputTuple,
      PoolsBaseURIChangedEvent.OutputTuple,
      PoolsBaseURIChangedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
